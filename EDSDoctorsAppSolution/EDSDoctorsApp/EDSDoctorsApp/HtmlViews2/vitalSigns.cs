#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EDSDoctorsApp.HtmlViews2
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#line 1 "vitalSigns.cshtml"
using EDSDoctorsApp.Resources;

#line default
#line hidden

#line 2 "vitalSigns.cshtml"
using EDSDoctorsApp.Helper.EMR;

#line default
#line hidden


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "17.1.0.269")]
public partial class vitalSigns : vitalSignsBase
{

#line hidden

#line 3 "vitalSigns.cshtml"
public (List<PatientsVital>,List<VmTrackers>) Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("<!DOCTYPE HTML>\r\n<html");

WriteLiteral(" lang=\"en\"");

WriteLiteral(">\r\n\r\n<head>\r\n    <meta");

WriteLiteral(" http-equiv=\"Content-Type\"");

WriteLiteral(" content=\"text/html; charset=utf-8\"");

WriteLiteral(" />\r\n    <meta");

WriteLiteral(" name=\"apple-mobile-web-app-capable\"");

WriteLiteral(" content=\"yes\"");

WriteLiteral(">\r\n    <meta");

WriteLiteral(" name=\"apple-mobile-web-app-status-bar-style\"");

WriteLiteral(" content=\"black-translucent\"");

WriteLiteral(">\r\n    <meta");

WriteLiteral(" name=\"viewport\"");

WriteLiteral("\r\n          content=\"width=device-width, initial-scale=1, minimum-scale=1, maximu" +
"m-scale=1, viewport-fit=cover\"");

WriteLiteral(" />\r\n    <title>eDoctor - Vital Signs</title>\r\n    <link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" type=\"text/css\"");

WriteAttribute ("href", " href=\"", "\""

#line 14 "vitalSigns.cshtml"
          , Tuple.Create<string,object,bool> ("", string.Concat("Sticky53/styles/bootstrap",AppResources.dir2,".css")

#line default
#line hidden
, false)
);
WriteLiteral(">\r\n    <link");

WriteLiteral(" href=\"Sticky53/fonts/css.css?family=Roboto:300,300i,400,400i,500,500i,700,700i,9" +
"00,900i|Source+Sans+Pro:300,300i,400,400i,600,600i,700,700i,900,900i&display=swa" +
"p\"");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(">\r\n    <link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" type=\"text/css\"");

WriteLiteral(" href=\"Sticky53/fonts/css/fontawesome-all.min.css\"");

WriteLiteral(">\r\n\r\n    <link");

WriteLiteral(" rel=\"manifest\"");

WriteLiteral(" href=\"_manifest.json\"");

WriteLiteral(" data-pwa-version=\"set_in_manifest_and_pwa_js\"");

WriteLiteral(">\r\n    <link");

WriteLiteral(" rel=\"apple-touch-icon\"");

WriteLiteral(" sizes=\"180x180\"");

WriteLiteral(" href=\"app/icons/icon-192x192.png\"");

WriteLiteral(">\r\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"Sticky/scripts/jquery-3.6.0.min.js\"");

WriteLiteral("></script>\r\n\r\n</head>\r\n\r\n<body");

WriteLiteral(" class=\"theme-light\"");

WriteLiteral(" data-highlight=\"highlight-red\"");

WriteLiteral(" data-gradient=\"body-default\"");

WriteLiteral(">\r\n    <div");

WriteLiteral(" id=\"preloader\"");

WriteLiteral(">\r\n        <div");

WriteLiteral(" class=\"spinner-border color-highlight\"");

WriteLiteral(" role=\"status\"");

WriteLiteral("></div>\r\n    </div>\r\n    <div");

WriteLiteral(" id=\"page\"");

WriteLiteral(">\r\n        <div");

WriteLiteral(" class=\"header header-fixed header-logo-center shadow-0\"");

WriteLiteral(" id=\"headerScope\"");

WriteLiteral(">\r\n            <p");

WriteLiteral(" class=\"header-title\"");

WriteLiteral(">Vital Signs</p>\r\n            <a");

WriteLiteral(" href=\"hybrid:goback\"");

WriteLiteral(" data-back-button");

WriteLiteral(" class=\"header-icon header-icon-1\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fas fa-arrow-left\"");

WriteLiteral("></i></a>\r\n            <a");

WriteLiteral(" href=\"hybrid:GotoHome\"");

WriteLiteral(" class=\"header-icon header-icon-4\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fas fa-home\"");

WriteLiteral("></i></a>\r\n        </div>\r\n        <div");

WriteLiteral(" id=\"footer-bar\"");

WriteLiteral(" class=\"footer-bar-1\"");

WriteLiteral(">\r\n            <a");

WriteLiteral(" href=\"hybrid:gotobasicinfo\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-info-circle\"");

WriteLiteral("></i><span>Basic Info</span></a>\r\n            <a");

WriteLiteral(" href=\"hybrid:gotovitalsigns\"");

WriteLiteral(" class=\"active-nav\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-heartbeat\"");

WriteLiteral("></i><span>Vital Signs</span></a>\r\n            <a");

WriteLiteral(" href=\"hybrid:gotogallery\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-images\"");

WriteLiteral("></i><span>Gallery</span></a>\r\n        </div>\r\n        <a");

WriteLiteral(" data-menu=\"newVitals\"");

WriteLiteral("\r\n           class=\"float-end position-fixed btn btn-m btn-full shadow-bg shadow-" +
"bg-m mb-3 rounded-s text-uppercase font-900 shadow-s bg-green-dark btn-icon text" +
"-start\"");

WriteLiteral("\r\n           style=\"right:30px;bottom: 10%;\"");

WriteLiteral(">\r\n            <!-- <i class=\"fa fa-check font-15 text-center\"></i> -->\r\n        " +
"    <i");

WriteLiteral(" class=\"fa fa-plus-circle font-15 text-center\"");

WriteLiteral("></i>Add New Vital Signs\r\n            <!-- <span class=\"badge bg-white color-blac" +
"k float-end ms-4 me-n2 mt-1\">4</span> -->\r\n        </a>\r\n        <div");

WriteLiteral(" class=\"page-content header-clear-large\"");

WriteLiteral(">\r\n            <div");

WriteLiteral(" class=\"content\"");

WriteLiteral(">\r\n                <!-- Tabs -->\r\n                <div");

WriteLiteral(" class=\"card mt-n4 fixed-top shadow\"");

WriteLiteral(" style=\"z-index: 3;top: 74px;\"");

WriteLiteral(" id=\"\"");

WriteLiteral(">\r\n                    <div");

WriteLiteral(" class=\"content\"");

WriteLiteral(">\r\n                        <div");

WriteLiteral(" class=\"tab-controls tabs-small tabs-rounded\"");

WriteLiteral(" data-highlight=\"bg-orange-dark\"");

WriteLiteral(">\r\n                            <a");

WriteLiteral(" href=\"#\"");

WriteLiteral(" class=\"no-effect\"");

WriteLiteral(" data-active");

WriteLiteral(" data-bs-toggle=\"collapse\"");

WriteLiteral("\r\n                               data-bs-target=\"#tab-1\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-notes-medical\"");

WriteLiteral("></i> </a>\r\n                            <a");

WriteLiteral(" href=\"#\"");

WriteLiteral(" class=\"no-effect\"");

WriteLiteral(" data-bs-toggle=\"collapse\"");

WriteLiteral(" data-bs-target=\"#tab-2\"");

WriteLiteral(">\r\n                                <i");

WriteLiteral(" class=\"fa fa-chart-line\"");

WriteLiteral("></i>\r\n                            </a>\r\n                        </div>\r\n        " +
"            </div>\r\n                </div>\r\n                <div");

WriteLiteral(" class=\"content mt-5\"");

WriteLiteral(" id=\"tab-group-2\"");

WriteLiteral(">\r\n\r\n                    <div");

WriteLiteral(" class=\"mt-2 pt-1\"");

WriteLiteral(">\r\n                        <!-- Cards View -->\r\n                        <div");

WriteLiteral(" data-bs-parent=\"#tab-group-2\"");

WriteLiteral(" class=\"timeline-item collapse show\"");

WriteLiteral(" id=\"tab-1\"");

WriteLiteral(">\r\n                            <div");

WriteLiteral(" class=\"content\"");

WriteLiteral(">\r\n");


#line 66 "vitalSigns.cshtml"
                                

#line default
#line hidden

#line 66 "vitalSigns.cshtml"
                                 foreach (var vital in Model.Item1)
                                {


#line default
#line hidden
WriteLiteral("                                    <div");

WriteLiteral(" class=\"row\"");

WriteLiteral(">\r\n                                        <div");

WriteLiteral(" class=\"col-7 p-0 mb-5 text-center timeline-icon w-100 bg-gray-dark \"");

WriteLiteral(" style=\"position:relative;left:0\"");

WriteLiteral(">\r\n                                            <p");

WriteLiteral(" class=\"px-3 font-13 color-white font-500\"");

WriteLiteral(">");


#line 70 "vitalSigns.cshtml"
                                                                                    Write(vital.Created);


#line default
#line hidden
WriteLiteral("</p>\r\n                                        </div>\r\n                           " +
"             <div");

WriteLiteral(" class=\"col-6 p-0 mb-2\"");

WriteLiteral(">\r\n                                            <div");

WriteLiteral(" class=\"card card-style bg-red-light p-0 mx-1 my-0\"");

WriteLiteral(" data-card-height=\"130\"");

WriteLiteral("\r\n                                             style=\"height: 130px;\"");

WriteLiteral(">\r\n                                                <div");

WriteLiteral(" class=\"card-top p-3\"");

WriteLiteral(">\r\n                                                    <h1");

WriteLiteral(" class=\"color-white font-500 font-30\"");

WriteLiteral(">");


#line 76 "vitalSigns.cshtml"
                                                                                        Write(vital.PatientsVitalsBloodPressure);


#line default
#line hidden
WriteLiteral("</h1>\r\n                                                </div>\r\n                  " +
"                              <div");

WriteLiteral(" class=\"card-bottom p-3\"");

WriteLiteral(">\r\n                                                    <h1");

WriteLiteral(" class=\"color-white mb-n1 font-600\"");

WriteLiteral(">\r\n                                                        <i");

WriteLiteral(" class=\"fa fa-heart font-15 pe-1\"");

WriteLiteral("></i>B.P\r\n                                                    </h1>\r\n            " +
"                                        <p");

WriteLiteral(" class=\"color-white opacity-60 mb-0\"");

WriteLiteral(">\r\n                                                        Blood Pressure\r\n      " +
"                                              </p>\r\n                            " +
"                    </div>\r\n                                                <div" +
"");

WriteLiteral(" class=\"card-overlay bg-gradient opacity-20\"");

WriteLiteral("></div>\r\n                                            </div>\r\n                    " +
"                    </div>\r\n                                        <div");

WriteLiteral(" class=\"col-6 p-0 mb-2\"");

WriteLiteral(">\r\n                                            <div");

WriteLiteral(" class=\"card card-style bg-yellow-dark p-0 mx-1 my-0\"");

WriteLiteral(" data-card-height=\"130\"");

WriteLiteral("\r\n                                             style=\"height: 130px;\"");

WriteLiteral(">\r\n                                                <div");

WriteLiteral(" class=\"card-top p-3\"");

WriteLiteral(">\r\n                                                    <h1");

WriteLiteral(" class=\"color-white font-500 font-30\"");

WriteLiteral(">");


#line 93 "vitalSigns.cshtml"
                                                                                        Write(vital.PatientsVitalsTemprature);


#line default
#line hidden
WriteLiteral(" &#8451;</h1>\r\n                                                </div>\r\n          " +
"                                      <div");

WriteLiteral(" class=\"card-bottom p-3\"");

WriteLiteral(">\r\n                                                    <h1");

WriteLiteral(" class=\"color-white mb-n1 font-600\"");

WriteLiteral(">\r\n                                                        <i");

WriteLiteral(" class=\"fa fa-temperature-low font-15 pe-1\"");

WriteLiteral("></i>Temp\r\n                                                    </h1>\r\n           " +
"                                         <p");

WriteLiteral(" class=\"color-white opacity-60 mb-0\"");

WriteLiteral(">\r\n                                                        Temperature\r\n         " +
"                                           </p>\r\n                               " +
"                 </div>\r\n                                                <div");

WriteLiteral(" class=\"card-overlay bg-gradient opacity-20\"");

WriteLiteral("></div>\r\n                                            </div>\r\n                    " +
"                    </div>\r\n                                        <div");

WriteLiteral(" class=\"col-6 p-0 mb-2\"");

WriteLiteral(">\r\n                                            <div");

WriteLiteral(" class=\"card card-style bg-mint-dark p-0 mx-1 my-0\"");

WriteLiteral(" data-card-height=\"130\"");

WriteLiteral("\r\n                                             style=\"height: 130px;\"");

WriteLiteral(">\r\n                                                <div");

WriteLiteral(" class=\"card-top p-3\"");

WriteLiteral(">\r\n                                                    <h1");

WriteLiteral(" class=\"color-white font-500 font-40\"");

WriteLiteral(">");


#line 110 "vitalSigns.cshtml"
                                                                                        Write(vital.PatientsVitalsPulse);


#line default
#line hidden
WriteLiteral("</h1>\r\n                                                </div>\r\n                  " +
"                              <div");

WriteLiteral(" class=\"card-bottom p-3\"");

WriteLiteral(">\r\n                                                    <h1");

WriteLiteral(" class=\"color-white mb-n1 font-600\"");

WriteLiteral(">\r\n                                                        <i");

WriteLiteral(" class=\"fa fa-heart font-15 pe-1\"");

WriteLiteral("></i>Pulse\r\n                                                    </h1>\r\n          " +
"                                          <p");

WriteLiteral(" class=\"color-white opacity-60 mb-0\"");

WriteLiteral(">\r\n                                                        Pulse\r\n               " +
"                                     </p>\r\n                                     " +
"           </div>\r\n                                                <div");

WriteLiteral(" class=\"card-overlay bg-gradient opacity-20\"");

WriteLiteral("></div>\r\n                                            </div>\r\n                    " +
"                    </div>\r\n                                        <div");

WriteLiteral(" class=\"col-6 p-0 mb-2\"");

WriteLiteral(">\r\n                                            <div");

WriteLiteral(" class=\"card card-style bg-mint-dark p-0 mx-1 my-0\"");

WriteLiteral(" data-card-height=\"130\"");

WriteLiteral("\r\n                                             style=\"height: 130px;\"");

WriteLiteral(">\r\n                                                <div");

WriteLiteral(" class=\"card-top p-3\"");

WriteLiteral(">\r\n                                                    <h1");

WriteLiteral(" class=\"color-white font-500 font-40\"");

WriteLiteral(">");


#line 127 "vitalSigns.cshtml"
                                                                                        Write(vital.PatientsVitalsRR);


#line default
#line hidden
WriteLiteral("</h1>\r\n                                                </div>\r\n                  " +
"                              <div");

WriteLiteral(" class=\"card-bottom p-3\"");

WriteLiteral(">\r\n                                                    <h1");

WriteLiteral(" class=\"color-white mb-n1 font-600\"");

WriteLiteral(">\r\n                                                        <i");

WriteLiteral(" class=\"fa fa-heart font-15 pe-1\"");

WriteLiteral("></i>Resp RTz\r\n                                                    </h1>\r\n       " +
"                                             <p");

WriteLiteral(" class=\"color-white opacity-60 mb-0\"");

WriteLiteral(">\r\n                                                        Resp RTz\r\n            " +
"                                        </p>\r\n                                  " +
"              </div>\r\n                                                <div");

WriteLiteral(" class=\"card-overlay bg-gradient opacity-20\"");

WriteLiteral("></div>\r\n                                            </div>\r\n                    " +
"                    </div>\r\n                                        <div");

WriteLiteral(" class=\"col-6 p-0 mb-2\"");

WriteLiteral(">\r\n                                            <div");

WriteLiteral(" class=\"card card-style bg-mint-dark p-0 mx-1 my-0\"");

WriteLiteral(" data-card-height=\"130\"");

WriteLiteral("\r\n                                             style=\"height: 130px;\"");

WriteLiteral(">\r\n                                                <div");

WriteLiteral(" class=\"card-top p-3\"");

WriteLiteral(">\r\n                                                    <h1");

WriteLiteral(" class=\"color-white font-500 font-40\"");

WriteLiteral(">");


#line 144 "vitalSigns.cshtml"
                                                                                        Write(vital.PatientsVitalsSpO2);


#line default
#line hidden
WriteLiteral("</h1>\r\n                                                </div>\r\n                  " +
"                              <div");

WriteLiteral(" class=\"card-bottom p-3\"");

WriteLiteral(">\r\n                                                    <h1");

WriteLiteral(" class=\"color-white mb-n1 font-600\"");

WriteLiteral(">\r\n                                                        <i");

WriteLiteral(" class=\"fa fa-heart font-15 pe-1\"");

WriteLiteral("></i>SpO2\r\n                                                    </h1>\r\n           " +
"                                         <p");

WriteLiteral(" class=\"color-white opacity-60 mb-0\"");

WriteLiteral(">\r\n                                                        Resp RTz\r\n            " +
"                                        </p>\r\n                                  " +
"              </div>\r\n                                                <div");

WriteLiteral(" class=\"card-overlay bg-gradient opacity-20\"");

WriteLiteral("></div>\r\n                                            </div>\r\n                    " +
"                    </div>\r\n                                        <div");

WriteLiteral(" class=\"col-6 p-0 mb-2\"");

WriteLiteral(">\r\n                                            <div");

WriteLiteral(" class=\"card card-style bg-mint-dark p-0 mx-1 my-0\"");

WriteLiteral(" data-card-height=\"130\"");

WriteLiteral("\r\n                                             style=\"height: 130px;\"");

WriteLiteral(">\r\n                                                <div");

WriteLiteral(" class=\"card-top p-3\"");

WriteLiteral(">\r\n                                                    <h1");

WriteLiteral(" class=\"color-white font-500 font-40\"");

WriteLiteral(">");


#line 161 "vitalSigns.cshtml"
                                                                                        Write(vital.PatientsVitalsRbs);


#line default
#line hidden
WriteLiteral("</h1>\r\n                                                </div>\r\n                  " +
"                              <div");

WriteLiteral(" class=\"card-bottom p-3\"");

WriteLiteral(">\r\n                                                    <h1");

WriteLiteral(" class=\"color-white mb-n1 font-600\"");

WriteLiteral(">\r\n                                                        <i");

WriteLiteral(" class=\"fa fa-heart font-15 pe-1\"");

WriteLiteral("></i>RBS\r\n                                                    </h1>\r\n            " +
"                                        <p");

WriteLiteral(" class=\"color-white opacity-60 mb-0\"");

WriteLiteral(">\r\n                                                        Random Blood Sugar\r\n  " +
"                                                  </p>\r\n                        " +
"                        </div>\r\n                                                " +
"<div");

WriteLiteral(" class=\"card-overlay bg-gradient opacity-20\"");

WriteLiteral("></div>\r\n                                            </div>\r\n                    " +
"                    </div>\r\n                                    </div>\r\n");


#line 175 "vitalSigns.cshtml"
                                }


#line default
#line hidden
WriteLiteral("                            </div>\r\n                        </div>\r\n             " +
"           <!-- Chart View -->\r\n                        <div");

WriteLiteral(" data-bs-parent=\"#tab-group-2\"");

WriteLiteral(" class=\"collapse \"");

WriteLiteral(" id=\"tab-2\"");

WriteLiteral(">\r\n                            <div");

WriteLiteral(" id=\"container1\"");

WriteLiteral(" style=\"width:100%; margin:20px 0px\"");

WriteLiteral("></div>\r\n                            <div");

WriteLiteral(" id=\"container2\"");

WriteLiteral(" style=\"width:100%; margin:20px 0px\"");

WriteLiteral("></div>\r\n                            <div");

WriteLiteral(" id=\"container3\"");

WriteLiteral(" style=\"width:100%; margin:20px 0px\"");

WriteLiteral("></div>\r\n                            <div");

WriteLiteral(" id=\"container4\"");

WriteLiteral(" style=\"width:100%; margin:20px 0px\"");

WriteLiteral("></div>\r\n                            <div");

WriteLiteral(" id=\"container5\"");

WriteLiteral(" style=\"width:100%; margin:20px 0px\"");

WriteLiteral("></div>\r\n                            <div");

WriteLiteral(" id=\"container6\"");

WriteLiteral(" style=\"width:100%; margin:20px 0px\"");

WriteLiteral("></div>\r\n                        </div>\r\n                    </div>\r\n            " +
"    </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div");

WriteLiteral(" id=\"newVitals\"");

WriteLiteral(" class=\"menu menu-box-bottom menu-box-detached\"");

WriteLiteral(">\r\n            <div");

WriteLiteral(" class=\"divider mx-auto mt-3 bg-gray-dark opacity-30 rounded-s mb-n1\"");

WriteLiteral(" style=\"height:5px; width:50px;\"");

WriteLiteral(">\r\n            </div>\r\n            <div");

WriteLiteral(" class=\"menu-title mt-0 pt-0\"");

WriteLiteral(">\r\n                <h1>Add New Vital Signs</h1>\r\n                <p");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Patients EMR</p><a");

WriteLiteral(" href=\"#\"");

WriteLiteral(" class=\"close-menu\"");

WriteLiteral(">\r\n                    <i");

WriteLiteral(" class=\"fa fa-times\"");

WriteLiteral("></i>\r\n                </a>\r\n            </div>\r\n            <div");

WriteLiteral(" class=\"divider divider-margins mb-n2\"");

WriteLiteral("></div>\r\n\r\n            <div");

WriteLiteral(" class=\"content\"");

WriteLiteral(">\r\n                <div");

WriteLiteral(" class=\"list-group\"");

WriteLiteral(">\r\n                    <form");

WriteLiteral(" action=\"hybrid:addnewvital\"");

WriteLiteral(">\r\n                        <!-- SELECT Chief complaint -->\r\n                     " +
"   <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                            <label");

WriteLiteral(" for=\"BloodPressure\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Blood Pressure</label>\r\n                            <input");

WriteLiteral(" name=\"BloodPressure\"");

WriteLiteral(" type=\"text\"");

WriteLiteral(" id=\"BloodPressure\"");

WriteLiteral(" placeholder=\"Blood Pressure\"");

WriteLiteral(" />\r\n                        </div>\r\n                        <!-- SELECT Vital si" +
"gns -->\r\n                        <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                            <label");

WriteLiteral(" for=\"Temperature\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Temperature</label>\r\n                            <input");

WriteLiteral(" name=\"Temperature\"");

WriteLiteral(" onkeypress=\'return event.charCode >= 48 && event.charCode <= 57\'");

WriteLiteral(" type=\"number\"");

WriteLiteral(" id=\"Temperature\"");

WriteLiteral(" placeholder=\"Temperature\"");

WriteLiteral(" />\r\n                        </div>\r\n                        <!-- SELECT Examinat" +
"ion -->\r\n                        <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                            <label");

WriteLiteral(" for=\"Pulse\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Pulse</label>\r\n                            <input");

WriteLiteral(" name=\"Pulse\"");

WriteLiteral(" onkeypress=\'return event.charCode >= 48 && event.charCode <= 57\'");

WriteLiteral(" type=\"number\"");

WriteLiteral(" id=\"Pulse\"");

WriteLiteral(" placeholder=\"Pulse\"");

WriteLiteral(" />\r\n                        </div>\r\n                        <!-- SELECT Provisio" +
"nal Diagnosis -->\r\n                        <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                            <label");

WriteLiteral(" for=\"Consciousness\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Consciousness</label>\r\n                            <select");

WriteLiteral(" name=\"Consciousness\"");

WriteLiteral(" id=\"Consciousness\"");

WriteLiteral(">\r\n                                <option");

WriteLiteral(" value=\"\"");

WriteLiteral(" disabled selected>Consciousness</option>\r\n                                <optio" +
"n");

WriteLiteral(" value=\"Alert\"");

WriteLiteral(">Alert</option>\r\n                                <option");

WriteLiteral(" value=\"Confusion\"");

WriteLiteral(">Confusion</option>\r\n                                <option");

WriteLiteral(" value=\"Pain\"");

WriteLiteral(">Pain</option>\r\n                                <option");

WriteLiteral(" value=\"Unresponsive\"");

WriteLiteral(">Unresponsive</option>\r\n                                <option");

WriteLiteral(" value=\"Voice\"");

WriteLiteral(">Voice</option>\r\n                            </select>\r\n                        <" +
"/div>\r\n                        <!-- SELECT Investigations -->\r\n                 " +
"       <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                            <label");

WriteLiteral(" for=\"Air/Oxygen\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Air/Oxygen</label>\r\n                            <select");

WriteLiteral(" name=\"AirOxygen\"");

WriteLiteral(" id=\"Air/Oxygen\"");

WriteLiteral(">\r\n                                <option");

WriteLiteral(" value=\"default\"");

WriteLiteral(" disabled selected>Air/Oxygen</option>\r\n                                <option");

WriteLiteral(" value=\"Air\"");

WriteLiteral(">Air</option>\r\n                                <option");

WriteLiteral(" value=\"Oxygen\"");

WriteLiteral(">Oxygen</option>\r\n                            </select>\r\n                        " +
"</div>\r\n                        <!-- SELECT Diagnosis -->\r\n                     " +
"   <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                            <label");

WriteLiteral(" for=\"RespirationRate\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Respiration Rate</label>\r\n                            <input");

WriteLiteral(" name=\"Respiration\"");

WriteLiteral(" type=\"number\"");

WriteLiteral(" onkeypress=\'return event.charCode >= 48 && event.charCode <= 57\'");

WriteLiteral(" id=\"RespirationRate\"");

WriteLiteral(" placeholder=\"Respiration Rate\"");

WriteLiteral(" />\r\n                        </div>\r\n                        <!-- SELECT Prescrip" +
"tion -->\r\n                        <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                            <label");

WriteLiteral(" for=\"SpO2\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">SpO2</label>\r\n                            <input");

WriteLiteral(" name=\"SpO2\"");

WriteLiteral(" type=\"number\"");

WriteLiteral(" onkeypress=\'return event.charCode >= 48 && event.charCode <= 57\'");

WriteLiteral(" id=\"SpO2\"");

WriteLiteral(" placeholder=\"SpO2\"");

WriteLiteral(" />\r\n                        </div>\r\n                        <button");

WriteLiteral(" id=\"submit-button\"");

WriteLiteral(" type=\"submit\"");

WriteLiteral(" data-back-button");

WriteLiteral(" class=\"btn btn-m btn-full mt-4 mb-4 rounded-l shadow-xl bg-highlight font-900 fo" +
"nt-14 text-uppercase w-100\"");

WriteLiteral(">Add</button>\r\n                    </form>\r\n                </div>\r\n            <" +
"/div>\r\n        </div>\r\n\r\n\r\n    </div>\r\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"Sticky53/scripts/bootstrap.min.js\"");

WriteLiteral("></script>\r\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"Sticky53/scripts/custom.js\"");

WriteLiteral("></script>\r\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"Sticky53/scripts/highcharts.js\"");

WriteLiteral(@"></script>

    <script>

              const datesarray = [];
            const bparray = [];
            const temparray = [];
            const pulsearray = [];
            const resparray = [];
            const spo2array = [];
            const rbsarray = [];
            debugger;
");


#line 274 "vitalSigns.cshtml"
        

#line default
#line hidden

#line 274 "vitalSigns.cshtml"
         foreach (var vital in Model.Item1)
        {


#line default
#line hidden
WriteLiteral("            ");

WriteLiteral("datesarray.push(\'");


#line 276 "vitalSigns.cshtml"
                              Write(vital.Created.Date.ToShortDateString());


#line default
#line hidden
WriteLiteral("\');");

WriteLiteral("\r\n");

WriteLiteral("            ");

WriteLiteral("bparray.push(");


#line 277 "vitalSigns.cshtml"
                          Write(vital.PatientsVitalsBloodPressure);


#line default
#line hidden
WriteLiteral(");");

WriteLiteral("\r\n");

WriteLiteral("            ");

WriteLiteral("temparray.push(");


#line 278 "vitalSigns.cshtml"
                            Write(vital.PatientsVitalsTemprature);


#line default
#line hidden
WriteLiteral(");");

WriteLiteral("\r\n");

WriteLiteral("            ");

WriteLiteral("pulsearray.push(");


#line 279 "vitalSigns.cshtml"
                             Write(vital.PatientsVitalsPulse);


#line default
#line hidden
WriteLiteral(");");

WriteLiteral("\r\n");

WriteLiteral("            ");

WriteLiteral("resparray.push(");


#line 280 "vitalSigns.cshtml"
                            Write(vital.PatientsVitalsRR);


#line default
#line hidden
WriteLiteral(");");

WriteLiteral("\r\n");

WriteLiteral("            ");

WriteLiteral("spo2array.push(");


#line 281 "vitalSigns.cshtml"
                            Write(vital.PatientsVitalsSpO2);


#line default
#line hidden
WriteLiteral(");");

WriteLiteral("\r\n");


#line 282 "vitalSigns.cshtml"
            //<text>rbsarray.push(@vital.PatientsVitalsRbs);</text>
        }


#line default
#line hidden
WriteLiteral("\r\n            datesarray.reverse();\r\n            bparray.reverse();\r\n            " +
"temparray.reverse();\r\n            pulsearray.reverse();\r\n            resparray.r" +
"everse();\r\n            spo2array.reverse();\r\n            //rbsarray.reverse();\r\n" +
"                  document.addEventListener(\'DOMContentLoaded\', function () {\r\n\r" +
"\n                    const chart1 = Highcharts.chart(\'container1\', {\r\n          " +
"              chart: {\r\n                            type: \'line\'\r\n              " +
"          },\r\n                        title: {\r\n                            text" +
": \'Blood Pressure\'\r\n                        },\r\n                        xAxis: {" +
"\r\n                            categories: datesarray\r\n                        }," +
"\r\n                        yAxis: {\r\n                            title: {\r\n      " +
"                          text: \'Value\'\r\n                            }\r\n        " +
"                },\r\n                        series: [\r\n                         " +
"   {\r\n                                name: \'Blood Pressure\',\r\n                 " +
"               data: bparray\r\n                            }\r\n                   " +
"     ],\r\n                        credits: {\r\n                            enabled" +
": false\r\n                        }\r\n                    });\r\n\r\n                 " +
"   const chart2 = Highcharts.chart(\'container2\', {\r\n                        char" +
"t: {\r\n                            type: \'line\'\r\n                        },\r\n    " +
"                    title: {\r\n                            text: \'Temperature\'\r\n " +
"                       },\r\n                        xAxis: {\r\n                   " +
"         categories: datesarray\r\n                        },\r\n                   " +
"     yAxis: {\r\n                            title: {\r\n                           " +
"     text: \'Degrees\'\r\n                            }\r\n                        },\r" +
"\n                        series: [\r\n                            {\r\n             " +
"                   name: \'Celsius\',\r\n                                data: tempa" +
"rray\r\n                            }\r\n                        ],\r\n               " +
"         credits: {\r\n                            enabled: false\r\n               " +
"         }\r\n                    });\r\n\r\n                    const chart3 = Highch" +
"arts.chart(\'container3\', {\r\n                        chart: {\r\n                  " +
"          type: \'line\'\r\n                        },\r\n                        titl" +
"e: {\r\n                            text: \'Pulse\'\r\n                        },\r\n   " +
"                     xAxis: {\r\n                            categories: datesarra" +
"y\r\n                        },\r\n                        yAxis: {\r\n               " +
"             title: {\r\n                                text: \'Value\'\r\n          " +
"                  }\r\n                        },\r\n                        series:" +
" [\r\n                            {\r\n                                name: \'Pulse\'" +
",\r\n                                data: pulsearray\r\n                           " +
" }\r\n                        ],\r\n                        credits: {\r\n            " +
"                enabled: false\r\n                        }\r\n                    }" +
");\r\n\r\n\r\n                    const chart4 = Highcharts.chart(\'container4\', {\r\n   " +
"                     chart: {\r\n                            type: \'line\'\r\n       " +
"                 },\r\n                        title: {\r\n                         " +
"   text: \'Respiration Rate\'\r\n                        },\r\n                       " +
" xAxis: {\r\n                            categories: datesarray\r\n                 " +
"       },\r\n                        yAxis: {\r\n                            title: " +
"{\r\n                                text: \'Value\'\r\n                            }\r" +
"\n                        },\r\n                        series: [\r\n                " +
"            {\r\n                                name: \'Respiration Rate\',\r\n      " +
"                          data: resparray\r\n                            }\r\n      " +
"                  ],\r\n                        credits: {\r\n                      " +
"      enabled: false\r\n                        }\r\n                    });\r\n\r\n\r\n  " +
"                  const chart5 = Highcharts.chart(\'container5\', {\r\n             " +
"           chart: {\r\n                            type: \'line\'\r\n                 " +
"       },\r\n                        title: {\r\n                            text: \'" +
"SpO2\'\r\n                        },\r\n                        xAxis: {\r\n           " +
"                 categories: datesarray\r\n                        },\r\n           " +
"             yAxis: {\r\n                            title: {\r\n                   " +
"             text: \'Value\'\r\n                            }\r\n                     " +
"   },\r\n                        series: [\r\n                            {\r\n       " +
"                         name: \'SpO2\',\r\n                                data: sp" +
"o2array\r\n                            }\r\n                        ],\r\n            " +
"            credits: {\r\n                            enabled: false\r\n            " +
"            }\r\n                    });\r\n\r\n                    //const chart6 = H" +
"ighcharts.chart(\'container6\', {\r\n                    //    chart: {\r\n           " +
"         //        type: \'line\'\r\n                    //    },\r\n                 " +
"   //    title: {\r\n                    //        text: \'RBS\'\r\n                  " +
"  //    },\r\n                    //    xAxis: {\r\n                    //        ca" +
"tegories: datesarray\r\n                    //    },\r\n                    //    yA" +
"xis: {\r\n                    //        title: {\r\n                    //          " +
"  text: \'Value\'\r\n                    //        }\r\n                    //    },\r\n" +
"                    //    series: [\r\n                    //        {\r\n          " +
"          //            name: \'RBS\',\r\n                    //            data: rb" +
"sarray\r\n                    //        }\r\n                    //    ]\r\n          " +
"          //});\r\n\r\n                });\r\n\r\n            //var numericvals = ");


#line 451 "vitalSigns.cshtml"
                           Write(Model.Item2);


#line default
#line hidden
WriteLiteral(";\r\n    </script>\r\n</body>\r\n");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class vitalSignsBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
