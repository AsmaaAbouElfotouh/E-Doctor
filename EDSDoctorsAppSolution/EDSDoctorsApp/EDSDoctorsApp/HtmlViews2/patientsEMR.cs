#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EDSDoctorsApp.HtmlViews2
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#line 1 "patientsEMR.cshtml"
using EDSDoctorsApp;

#line default
#line hidden

#line 2 "patientsEMR.cshtml"
using EDSDoctorsApp.Resources;

#line default
#line hidden

#line 3 "patientsEMR.cshtml"
using EDSDoctorsApp.Helper.EMR;

#line default
#line hidden

#line 4 "patientsEMR.cshtml"
using Newtonsoft.Json.Linq;

#line default
#line hidden

#line 5 "patientsEMR.cshtml"
using Xamarin.Essentials;

#line default
#line hidden

#line 6 "patientsEMR.cshtml"
using Newtonsoft.Json;

#line default
#line hidden


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "17.1.0.269")]
public partial class patientsEMR : patientsEMRBase
{

#line hidden

#line 7 "patientsEMR.cshtml"
public (List<GroupExaminationVm>,string,string,List<DropDownListModel>,List<DropDownListModel>,List<DropDownListModel>,List<DropDownListModel>,string,string) Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("<!DOCTYPE HTML>\r\n<html");

WriteLiteral(" lang=\"en\"");

WriteLiteral(">\r\n\r\n<head>\r\n    <meta");

WriteLiteral(" http-equiv=\"Content-Type\"");

WriteLiteral(" content=\"text/html; charset=utf-8\"");

WriteLiteral(" />\r\n    <meta");

WriteLiteral(" name=\"apple-mobile-web-app-capable\"");

WriteLiteral(" content=\"yes\"");

WriteLiteral(">\r\n    <meta");

WriteLiteral(" name=\"apple-mobile-web-app-status-bar-style\"");

WriteLiteral(" content=\"black-translucent\"");

WriteLiteral(">\r\n    <meta");

WriteLiteral(" name=\"viewport\"");

WriteLiteral("\r\n          content=\"width=device-width, initial-scale=1, minimum-scale=1, maximu" +
"m-scale=1, viewport-fit=cover\"");

WriteLiteral(" />\r\n    <title>eDoctor - Patients EMR</title>\r\n    <link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" type=\"text/css\"");

WriteAttribute ("href", " href=\"", "\""

#line 18 "patientsEMR.cshtml"
          , Tuple.Create<string,object,bool> ("", string.Concat("Sticky53/styles/bootstrap",AppResources.dir2,".css")

#line default
#line hidden
, false)
);
WriteLiteral(">\r\n    <link");

WriteLiteral(" href=\"Sticky53/fonts/css.css?family=Roboto:300,300i,400,400i,500,500i,700,700i,9" +
"00,900i|Source+Sans+Pro:300,300i,400,400i,600,600i,700,700i,900,900i&display=swa" +
"p\"");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(">\r\n    <link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" type=\"text/css\"");

WriteLiteral(" href=\"Sticky53/fonts/css/fontawesome-all.min.css\"");

WriteLiteral(">\r\n\r\n    <link");

WriteLiteral(" rel=\"manifest\"");

WriteLiteral(" href=\"_manifest.json\"");

WriteLiteral(" data-pwa-version=\"set_in_manifest_and_pwa_js\"");

WriteLiteral(">\r\n    <link");

WriteLiteral(" rel=\"apple-touch-icon\"");

WriteLiteral(" sizes=\"180x180\"");

WriteLiteral(" href=\"app/icons/icon-192x192.png\"");

WriteLiteral(">\r\n    <style>\r\n        .timeline-item-content:first-of-type,\r\n        .timeline-" +
"item-content-full:first-of-type {\r\n            margin: 0 35px 30px 65px;\r\n      " +
"  }\r\n    </style>\r\n</head>\r\n\r\n<body");

WriteLiteral(" class=\"theme-light\"");

WriteLiteral(" data-highlight=\"highlight-red\"");

WriteLiteral(" data-gradient=\"body-default\"");

WriteLiteral(">\r\n    <div");

WriteLiteral(" id=\"preloader\"");

WriteLiteral(">\r\n        <div");

WriteLiteral(" class=\"spinner-border color-highlight\"");

WriteLiteral(" role=\"status\"");

WriteLiteral("></div>\r\n    </div>\r\n    <div");

WriteLiteral(" id=\"page\"");

WriteLiteral(">\r\n        <div");

WriteLiteral(" class=\"header header-fixed header-logo-center \"");

WriteLiteral(" id=\"headerScope\"");

WriteLiteral(">\r\n            <p");

WriteLiteral(" class=\"header-title\"");

WriteLiteral(">EMR</p>\r\n            <a");

WriteLiteral(" href=\"hybrid:goback\"");

WriteLiteral(" data-back-button");

WriteLiteral(" class=\"header-icon header-icon-1\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fas fa-arrow-left\"");

WriteLiteral("></i></a>\r\n            <a");

WriteLiteral(" href=\"hybrid:GotoHome\"");

WriteLiteral(" class=\"header-icon header-icon-4\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fas fa-home\"");

WriteLiteral("></i></a>\r\n        </div>\r\n        <div");

WriteLiteral(" id=\"footer-bar\"");

WriteLiteral(" class=\"footer-bar-1\"");

WriteLiteral(">\r\n            <a");

WriteLiteral(" href=\"hybrid:gotobasicinfo\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-info-circle\"");

WriteLiteral("></i><span>Basic Info</span></a>\r\n            <a");

WriteLiteral(" href=\"hybrid:gotovitalsigns\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-heartbeat\"");

WriteLiteral("></i><span>Vital Signs</span></a>\r\n            <a");

WriteLiteral(" href=\"hybrid:gotogallery\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-images\"");

WriteLiteral("></i><span>Gallery</span></a>\r\n        </div>\r\n        <div");

WriteLiteral(" class=\"page-contentX header-clear-large\"");

WriteLiteral(">\r\n\r\n            <div");

WriteLiteral(" class=\"timeline-cover timeline-cover-center\"");

WriteLiteral(">\r\n                <div");

WriteLiteral(" data-card-height=\"150\"");

WriteLiteral(" class=\"card shadow-l preload-img\"");

WriteLiteral(" data-src=\"\"");

WriteLiteral(" style=\"height: 150px;\"");

WriteLiteral(">\r\n                    <div");

WriteLiteral(" class=\"card-center text-center\"");

WriteLiteral(">\r\n                        <p");

WriteLiteral(" class=\"color-white mb-n3 pb-0 text-truncate px-4 font-16\"");

WriteLiteral(">");


#line 52 "patientsEMR.cshtml"
                                                                                Write(Model.Item3);


#line default
#line hidden
WriteLiteral("</p>\r\n                        <h2");

WriteLiteral(" class=\"color-white pt-3 pb-3 text-truncate px-4\"");

WriteLiteral(">");


#line 53 "patientsEMR.cshtml"
                                                                        Write(Model.Item2);


#line default
#line hidden
WriteLiteral("</h2>\r\n                    </div>\r\n\r\n                    <div");

WriteLiteral(" class=\"card-overlay bg-orange-dark opacity-80\"");

WriteLiteral("></div>\r\n                    <div");

WriteLiteral(" class=\"card-overlay bg-gradient-fade opacity-10\"");

WriteLiteral("></div>\r\n                    <!-- <div class=\"card-overlay bg-gradient-fade-small" +
"\"></div> -->\r\n                </div>\r\n            </div>\r\n\r\n            <div");

WriteLiteral(" class=\"timeline-body\"");

WriteLiteral(" style=\"margin-top: 100px;\"");

WriteLiteral(">\r\n                <!-- Tabs -->\r\n                <div");

WriteLiteral(" class=\"card card-style mt-n4\"");

WriteLiteral(" style=\"z-index: 3;\"");

WriteLiteral(" id=\"tabInScrollY\"");

WriteLiteral(">\r\n                    <div");

WriteLiteral(" class=\"content\"");

WriteLiteral(">\r\n                        <div");

WriteLiteral(" class=\"tab-controls tabs-small tabs-rounded\"");

WriteLiteral(" data-highlight=\"bg-orange-dark\"");

WriteLiteral(">\r\n                            <a");

WriteLiteral(" href=\"#\"");

WriteLiteral(" class=\"no-effect font-10\"");

WriteLiteral(" data-active");

WriteLiteral(" data-bs-toggle=\"collapse\"");

WriteLiteral("\r\n                               data-bs-target=\"#tab-5\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-tasks\"");

WriteLiteral("></i> Timeline</a>\r\n                            <a");

WriteLiteral(" href=\"#\"");

WriteLiteral(" class=\"no-effect font-10\"");

WriteLiteral(" data-bs-toggle=\"collapse\"");

WriteLiteral(" data-bs-target=\"#tab-6\"");

WriteLiteral(">\r\n                                <i");

WriteLiteral(" class=\"fa fa-history\"");

WriteLiteral("></i> Medical History\r\n                            </a>\r\n                        " +
"    <a");

WriteLiteral(" href=\"#\"");

WriteLiteral(" class=\"no-effect font-10\"");

WriteLiteral(" data-bs-toggle=\"collapse\"");

WriteLiteral(" data-bs-target=\"#tab-7\"");

WriteLiteral(">\r\n                                <i");

WriteLiteral(" class=\"fa fa-chart-line\"");

WriteLiteral("></i> Review & Systems\r\n                            </a>\r\n                       " +
" </div>\r\n                    </div>\r\n                </div>\r\n                <!-" +
"- Content -->\r\n                <div");

WriteLiteral(" class=\"content\"");

WriteLiteral(" id=\"tab-group-2\"");

WriteLiteral(">\r\n                    <a");

WriteAttribute ("href", " href=\"", "\""
, Tuple.Create<string,object,bool> ("", "hybrid:savepatientemr?PatientID=", true)

#line 80 "patientsEMR.cshtml"
                      , Tuple.Create<string,object,bool> ("", Model.Item9

#line default
#line hidden
, false)
, Tuple.Create<string,object,bool> ("", "&PatientMRno=", true)

#line 80 "patientsEMR.cshtml"
                                               , Tuple.Create<string,object,bool> ("", Model.Item3

#line default
#line hidden
, false)
, Tuple.Create<string,object,bool> ("", "&RiskFactors=&ChronicDiseases=&Phobias=&PatientsMedicalHistory=&Implants=&SocialH" +
"abits=&SocialNotes=&SurgeryNotes=&Alcohol=&Coffee=&Tea=&Smoker=&RecreationalDrug" +
"s=&OccupationalHazards=&ReviewOptions=", true)
);
WriteLiteral("\r\n                       class=\"float-end position-fixed btn btn-m btn-full shado" +
"w-bg shadow-bg-m mb-3 rounded-s text-uppercase font-900 shadow-s bg-green-dark b" +
"tn-icon text-start\"");

WriteLiteral("\r\n                       style=\"bottom: 8%;margin:30%\"");

WriteLiteral(" onclick=\"updateURLParameters(this)\"");

WriteLiteral(">\r\n                        <!-- <i class=\"fa fa-check font-15 text-center\"></i> -" +
"->\r\n                        <i");

WriteLiteral(" class=\"fa fa-save font-15 text-center\"");

WriteLiteral("></i>Save\r\n                        <!-- <span class=\"badge bg-white color-black f" +
"loat-end ms-4 me-n2 mt-1\">4</span> -->\r\n                    </a>\r\n              " +
"      <!-- Time Line -->\r\n                    <div");

WriteLiteral(" data-bs-parent=\"#tab-group-2\"");

WriteLiteral(" class=\"collapse show\"");

WriteLiteral(" id=\"tab-5\"");

WriteLiteral(">\r\n                        <!-- Add New Examination Floating Button -->\r\n        " +
"                ");

WriteLiteral("\r\n\r\n\r\n\r\n                        ");

WriteLiteral("\r\n                        <div");

WriteLiteral(" class=\"timeline-body mt-n5 pt-3\"");

WriteLiteral(">\r\n                            <div");

WriteLiteral(" class=\"timeline-deco\"");

WriteLiteral("></div>\r\n                            <!-- Add New Examination -->\r\n              " +
"              <div");

WriteLiteral(" class=\"timeline-item \"");

WriteLiteral(">\r\n                                <i");

WriteLiteral(" class=\"fa fa-plus-circle bg-orange-dark shadow-l timeline-icon\"");

WriteLiteral("></i>\r\n                                <div");

WriteLiteral(" class=\"timeline-item-content rounded-s bg-transparent border-0\"");

WriteLiteral(">\r\n                                    <h5");

WriteLiteral(" class=\"font-900 font-16 m-0 pt-3 \"");

WriteLiteral(">\r\n                                        <a");

WriteLiteral(" href=\"hybrid:gotonewexamination\"");

WriteLiteral(" class=\"color-orange-light\"");

WriteLiteral(@">
                                            Add New
                                            Examination
                                        </a>
                                    </h5>
                                </div>
                            </div>
                            <!-- Old Examination -->
");


#line 118 "patientsEMR.cshtml"
                            

#line default
#line hidden

#line 118 "patientsEMR.cshtml"
                             foreach (var timeline in Model.Item1)
                            {


#line default
#line hidden
WriteLiteral("                                <div");

WriteLiteral(" class=\"timeline-item\"");

WriteLiteral(">\r\n                                    <div");

WriteLiteral(" class=\"text-center timeline-icon w-auto bg-gray-dark \"");

WriteLiteral(" style=\"top:-57px\"");

WriteLiteral(">\r\n                                        <p");

WriteLiteral(" class=\"px-3 font-13 color-white font-500\"");

WriteLiteral(">");


#line 122 "patientsEMR.cshtml"
                                                                                Write(timeline.TimeLineMonth);


#line default
#line hidden
WriteLiteral("</p>\r\n                                    </div>\r\n");


#line 124 "patientsEMR.cshtml"
                                    

#line default
#line hidden

#line 124 "patientsEMR.cshtml"
                                     foreach (var exam in timeline.Exams)
                                    {
                                        List<ExaminationsDatum> examData = new List<ExaminationsDatum>();
                                        List<VmAttachments> AttachmentList = new List<VmAttachments>();
                                        string AttachmentsData = "";
                                        var examDataJson = Shared.PostAPI($"api/Paitent/{Preferences.Get("savedCulture", "en-GB")}/PatientsEmr/loadexamdatatm?Id={exam.Id}", JsonConvert.SerializeObject(new { Id = exam.Id }));
                                        if (!string.IsNullOrWhiteSpace(examDataJson))
                                        {
                                            examData = (JsonConvert.DeserializeObject<List<ExaminationsDatum>>(JObject.Parse(examDataJson)["result"].ToString()));
                                        }
                                        var examAttachments = Shared.PostAPI($"api/Account/{Preferences.Get("savedCulture", "en-GB")}/Account/GetAttachedFiles?AccountsID={SecureStorage.GetAsync("AccountID").Result}&ParentID={exam.Id}&Type=Examination");
                                        if (!string.IsNullOrWhiteSpace(examAttachments))
                                        {
                                            AttachmentsData = (JObject.Parse(examAttachments)["result"] as JArray).ToString();
                                        }
                                        if (!string.IsNullOrWhiteSpace(AttachmentsData))
                                        {
                                            AttachmentList = JsonConvert.DeserializeObject<List<VmAttachments>>(AttachmentsData);
                                        }



#line default
#line hidden
WriteLiteral("                                        <div");

WriteLiteral(" class=\"timeline-item-content rounded-s\"");

WriteLiteral(" style=\"margin: 108px 15px 30px 60px\"");

WriteLiteral(">\r\n                                            <div");

WriteLiteral(" class=\"row\"");

WriteLiteral(">\r\n");


#line 146 "patientsEMR.cshtml"
                                                

#line default
#line hidden

#line 146 "patientsEMR.cshtml"
                                                 if (Shared.IsConnected())
                                                {


#line default
#line hidden
WriteLiteral("                                                    <div");

WriteLiteral(" class=\"col-12 px-3\"");

WriteLiteral(">\r\n                                                        <div");

WriteLiteral(" class=\"d-flex flex-row gap-1 justify-content-end\"");

WriteLiteral(">\r\n                                                            <a");

WriteAttribute ("href", " href=\"", "\""
, Tuple.Create<string,object,bool> ("", "hybrid:gotonewexamination?ExamID=", true)

#line 150 "patientsEMR.cshtml"
                                                               , Tuple.Create<string,object,bool> ("", exam.Id

#line default
#line hidden
, false)
);
WriteLiteral("\r\n                                                   class=\"btn rounded-m bg-dark" +
"-dark font-700 text-uppercase line-height-sm\"");

WriteLiteral(">Details</a>\r\n                                                        </div>\r\n   " +
"                                                 </div>\r\n");


#line 154 "patientsEMR.cshtml"
                                                }


#line default
#line hidden
WriteLiteral("                                                <div");

WriteLiteral(" class=\"col-auto\"");

WriteLiteral(">\r\n                                                    <h5>Description :</h5>\r\n  " +
"                                              </div>\r\n                          " +
"                      <div");

WriteLiteral(" class=\"col-auto\"");

WriteLiteral(">\r\n                                                    <p>\r\n                     " +
"                               <p>\r\n");

WriteLiteral("                                                            ");


#line 161 "patientsEMR.cshtml"
                                                       Write(exam.DoctorName);


#line default
#line hidden
WriteLiteral(" <br />\r\n");


#line 162 "patientsEMR.cshtml"
                                                            

#line default
#line hidden

#line 162 "patientsEMR.cshtml"
                                                             if (exam.Department != null)
                                                            {


#line default
#line hidden
WriteLiteral("                                                            <span>");


#line 164 "patientsEMR.cshtml"
                                                             Write(exam.Department);


#line default
#line hidden
WriteLiteral(" / ");


#line 164 "patientsEMR.cshtml"
                                                                                Write(exam.VisitType);


#line default
#line hidden
WriteLiteral(" </span>\r\n");


#line 165 "patientsEMR.cshtml"
                                                            }


#line default
#line hidden
WriteLiteral("                                                    </p>\r\n");


#line 167 "patientsEMR.cshtml"
                                                        

#line default
#line hidden

#line 167 "patientsEMR.cshtml"
                                                         foreach (var data in examData.GroupBy(x => x.ExaminationsDataSection))
                                                        {



#line default
#line hidden
WriteLiteral("                                                        <b>");


#line 170 "patientsEMR.cshtml"
                                                      Write(data.Key);


#line default
#line hidden
WriteLiteral("</b>\r\n");


#line 171 "patientsEMR.cshtml"
                                                            foreach (var datavalue in data)
                                                            {


#line default
#line hidden
WriteLiteral("                                                            <p>");


#line 173 "patientsEMR.cshtml"
                                                          Write(datavalue.ExaminationsDataField);


#line default
#line hidden
WriteLiteral(": ");


#line 173 "patientsEMR.cshtml"
                                                                                            Write(datavalue.ExaminationsDataValue);


#line default
#line hidden
WriteLiteral("</p>\r\n");


#line 174 "patientsEMR.cshtml"
                                                            }
                                                        }


#line default
#line hidden
WriteLiteral(@"                                                    </p>
                                                </div>
                                            </div>
                                            <!-- button Files -->
                                    <div");

WriteLiteral(" class=\"content\"");

WriteLiteral(">\r\n                                                <div");

WriteLiteral(" class=\"row row-auto mb-0\"");

WriteLiteral(">\r\n");


#line 182 "patientsEMR.cshtml"
                                                    

#line default
#line hidden

#line 182 "patientsEMR.cshtml"
                                                     foreach (var Attachment in AttachmentList)
                                                    {


#line default
#line hidden
WriteLiteral("                                                        <div");

WriteLiteral(" class=\"px-1\"");

WriteLiteral(">\r\n                                                            <a");

WriteLiteral(" href=\"#\"");

WriteLiteral("\r\n                                                   class=\"btn btn-m btn-full mb" +
"-3 rounded-xl text-uppercase font-900 shadow-s bg-blue-dark\"");

WriteLiteral(" style=\"word-wrap: break-word;\"");

WriteLiteral(">\r\n");

WriteLiteral("                                                                ");


#line 187 "patientsEMR.cshtml"
                                                           Write(Attachment.attachmentsName);


#line default
#line hidden
WriteLiteral("\r\n                                                            </a>\r\n             " +
"                                           </div>\r\n");


#line 190 "patientsEMR.cshtml"
                                                    }


#line default
#line hidden
WriteLiteral("                                                </div>\r\n                         " +
"                   </div>\r\n                                        </div>\r\n");


#line 194 "patientsEMR.cshtml"
                                    }


#line default
#line hidden
WriteLiteral("                                </div>\r\n");


#line 196 "patientsEMR.cshtml"
                            }


#line default
#line hidden
WriteLiteral("                        </div>\r\n                        <div");

WriteLiteral(" class=\"clearfix mb-5 mt-3\"");

WriteLiteral("></div>\r\n                    </div>\r\n                    <!-- Medical -->\r\n      " +
"              <div");

WriteLiteral(" data-bs-parent=\"#tab-group-2\"");

WriteLiteral(" class=\"collapse \"");

WriteLiteral(" id=\"tab-6\"");

WriteLiteral(">\r\n                        <div");

WriteLiteral(" class=\"accordion mt-2 pb-3\"");

WriteLiteral(" id=\"accordion-2a\"");

WriteLiteral(">\r\n                            <div");

WriteLiteral(" class=\"card card-style bg-white p-4 shadow-0 mb-4\"");

WriteLiteral(" style=\"height:100%;\"");

WriteLiteral(">\r\n                                <!-- SELECT A Risk -->\r\n                      " +
"          <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                                    <i");

WriteLiteral(" class=\"fa fa-question-circle\"");

WriteLiteral("></i>\r\n                                    <label");

WriteLiteral(" for=\"\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Risk Factors</label>\r\n                                    <select");

WriteLiteral(" id=\"RiskFactorsOptions\"");

WriteLiteral(" name=\"RiskFactorsOptions\"");

WriteLiteral(" multiple=\"multiple\"");

WriteLiteral(">\r\n                                        <option");

WriteLiteral(" value=\"default\"");

WriteLiteral(" disabled hidden>Risk Factors</option>\r\n");


#line 210 "patientsEMR.cshtml"
                                        

#line default
#line hidden

#line 210 "patientsEMR.cshtml"
                                         foreach (var risk in @Model.Item4)
                                        {
                                            if (App.PatientEMR.PatientsEMR != null)
                                            {
                                                if (!string.IsNullOrEmpty(App.PatientEMR.PatientsEMR.PatientsRiskFactors) && App.PatientEMR.PatientsEMR.PatientsRiskFactors.Split('|').Contains(@risk.Name))
                                                {


#line default
#line hidden
WriteLiteral("                                                    <option");

WriteAttribute ("value", " value=\"", "\""

#line 216 "patientsEMR.cshtml"
                            , Tuple.Create<string,object,bool> ("", risk.Name

#line default
#line hidden
, false)
);
WriteLiteral(" selected>");


#line 216 "patientsEMR.cshtml"
                                                                                   Write(risk.Name);


#line default
#line hidden
WriteLiteral("</option>\r\n");


#line 217 "patientsEMR.cshtml"
                                                }
                                                else
                                                {


#line default
#line hidden
WriteLiteral("                                                    <option");

WriteAttribute ("value", " value=\"", "\""

#line 220 "patientsEMR.cshtml"
                            , Tuple.Create<string,object,bool> ("", risk.Name

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 220 "patientsEMR.cshtml"
                                                                          Write(risk.Name);


#line default
#line hidden
WriteLiteral("</option>\r\n");


#line 221 "patientsEMR.cshtml"
                                                }
                                            }
                                            else
                                            {


#line default
#line hidden
WriteLiteral("                                                <option");

WriteAttribute ("value", " value=\"", "\""

#line 225 "patientsEMR.cshtml"
                        , Tuple.Create<string,object,bool> ("", risk.Name

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 225 "patientsEMR.cshtml"
                                                                      Write(risk.Name);


#line default
#line hidden
WriteLiteral("</option>\r\n");


#line 226 "patientsEMR.cshtml"
                                            }
                                        }


#line default
#line hidden
WriteLiteral("                                    </select>\r\n                                  " +
"  <span");

WriteLiteral(" style=\"width:8.75px;height:60%;\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-chevron-down\"");

WriteLiteral("></i></span>\r\n                                    <i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\r\n                                    <i");

WriteLiteral(" class=\"fa fa-check disabled invalid color-red-dark\"");

WriteLiteral("></i>\r\n                                    <em></em>\r\n                           " +
"     </div>\r\n                                <!-- SELECT Chronic Disease -->\r\n  " +
"                              <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                                    <i");

WriteLiteral(" class=\"fa fa-question-circle\"");

WriteLiteral("></i>\r\n                                    <label");

WriteLiteral(" for=\"\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Chronic Diseases</label>\r\n                                    <select");

WriteLiteral(" id=\"ChronicOptions\"");

WriteLiteral(" name=\"ChronicOptions\"");

WriteLiteral(" multiple=\"multiple\"");

WriteLiteral(">\r\n                                        <option");

WriteLiteral(" value=\"default\"");

WriteLiteral(" disabled hidden>Chronic Diseases</option>\r\n");


#line 240 "patientsEMR.cshtml"
                                        

#line default
#line hidden

#line 240 "patientsEMR.cshtml"
                                         foreach (var chronicdisease in @Model.Item5)
                                        {
                                            if (App.PatientEMR.PatientsEMR != null)
                                            {
                                                if (!string.IsNullOrEmpty(App.PatientEMR.PatientsEMR.PatientsChronicDisease) && App.PatientEMR.PatientsEMR.PatientsChronicDisease.Split('|').Contains(@chronicdisease.Name))
                                                {


#line default
#line hidden
WriteLiteral("                                                    <option");

WriteAttribute ("value", " value=\"", "\""

#line 246 "patientsEMR.cshtml"
                            , Tuple.Create<string,object,bool> ("", chronicdisease.Name

#line default
#line hidden
, false)
);
WriteLiteral(" selected>");


#line 246 "patientsEMR.cshtml"
                                                                                             Write(chronicdisease.Name);


#line default
#line hidden
WriteLiteral("</option>\r\n");


#line 247 "patientsEMR.cshtml"
                                                }
                                                else
                                                {


#line default
#line hidden
WriteLiteral("                                                    <option");

WriteAttribute ("value", " value=\"", "\""

#line 250 "patientsEMR.cshtml"
                            , Tuple.Create<string,object,bool> ("", chronicdisease.Name

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 250 "patientsEMR.cshtml"
                                                                                    Write(chronicdisease.Name);


#line default
#line hidden
WriteLiteral("</option>\r\n");


#line 251 "patientsEMR.cshtml"
                                                }
                                            }
                                            else
                                            {


#line default
#line hidden
WriteLiteral("                                                <option");

WriteAttribute ("value", " value=\"", "\""

#line 255 "patientsEMR.cshtml"
                        , Tuple.Create<string,object,bool> ("", chronicdisease.Name

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 255 "patientsEMR.cshtml"
                                                                                Write(chronicdisease.Name);


#line default
#line hidden
WriteLiteral("</option>\r\n");


#line 256 "patientsEMR.cshtml"
                                            }
                                        }


#line default
#line hidden
WriteLiteral("                                    </select>\r\n                                  " +
"  <span");

WriteLiteral(" style=\"width:8.75px;height:60%;\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-chevron-down\"");

WriteLiteral("></i></span>\r\n                                    <i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\r\n                                    <i");

WriteLiteral(" class=\"fa fa-check disabled invalid color-red-dark\"");

WriteLiteral("></i>\r\n                                    <em></em>\r\n                           " +
"     </div>\r\n                                <!-- Wear Implant -->\r\n            " +
"                    <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                                    <i");

WriteLiteral(" class=\"fa fa-question-circle\"");

WriteLiteral("></i>\r\n");


#line 267 "patientsEMR.cshtml"
                                    

#line default
#line hidden

#line 267 "patientsEMR.cshtml"
                                     if (!string.IsNullOrWhiteSpace(App.PatientEMR.PatientsEMR.PatientsImplants))
                                    {


#line default
#line hidden
WriteLiteral("                                        <input");

WriteLiteral(" type=\"name\"");

WriteLiteral(" class=\"form-control validate-name\"");

WriteAttribute ("value", " value=", ""

#line 269 "patientsEMR.cshtml"
                                                             , Tuple.Create<string,object,bool> ("", App.PatientEMR.PatientsEMR.PatientsImplants

#line default
#line hidden
, false)
);
WriteLiteral(" id=\"ImplantInput\"");

WriteLiteral("\r\n                                           placeholder=\"Wear Implant\"");

WriteLiteral(">\r\n");


#line 271 "patientsEMR.cshtml"
                                    }
                                    else
                                    {


#line default
#line hidden
WriteLiteral("                                        <input");

WriteLiteral(" type=\"name\"");

WriteLiteral(" class=\"form-control validate-name\"");

WriteLiteral(" id=\"ImplantInput\"");

WriteLiteral("\r\n                                           placeholder=\"Wear Implant\"");

WriteLiteral(">\r\n");


#line 276 "patientsEMR.cshtml"
                                    }


#line default
#line hidden
WriteLiteral("                                    <label");

WriteLiteral(" for=\"\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Wear Implant</label>\r\n                                    <i");

WriteLiteral(" class=\"fa fa-times disabled invalid color-red-dark\"");

WriteLiteral("></i>\r\n                                    <i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\r\n                                </div>\r\n                                <!" +
"-- Significant illness -->\r\n                                <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                                    <i");

WriteLiteral(" class=\"fa fa-question-circle\"");

WriteLiteral("></i>\r\n");


#line 284 "patientsEMR.cshtml"
                                    

#line default
#line hidden

#line 284 "patientsEMR.cshtml"
                                     if (!string.IsNullOrWhiteSpace(App.PatientEMR.PatientsEMR.PatientsMedicalHistory))
                                    {


#line default
#line hidden
WriteLiteral("                                        <input");

WriteLiteral(" type=\"name\"");

WriteLiteral(" class=\"form-control validate-name\"");

WriteAttribute ("value", " value=", ""

#line 286 "patientsEMR.cshtml"
                                                             , Tuple.Create<string,object,bool> ("", App.PatientEMR.PatientsEMR.PatientsMedicalHistory

#line default
#line hidden
, false)
);
WriteLiteral(" id=\"MedicalInput\"");

WriteLiteral("\r\n                                           placeholder=\"Significant illness\"");

WriteLiteral(">\r\n");


#line 288 "patientsEMR.cshtml"
                                    }
                                    else
                                    {


#line default
#line hidden
WriteLiteral("                                        <input");

WriteLiteral(" type=\"name\"");

WriteLiteral(" class=\"form-control validate-name\"");

WriteLiteral(" id=\"MedicalInput\"");

WriteLiteral("\r\n                                           placeholder=\"Significant illness\"");

WriteLiteral(">\r\n");


#line 293 "patientsEMR.cshtml"
                                    }


#line default
#line hidden
WriteLiteral("                                    <label");

WriteLiteral(" for=\"\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Significant illness</label>\r\n                                    <i");

WriteLiteral(" class=\"fa fa-times disabled invalid color-red-dark\"");

WriteLiteral("></i>\r\n                                    <i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\r\n                                </div>\r\n                                <!" +
"-- SELECT Do you have phobia -->\r\n                                <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                                    <i");

WriteLiteral(" class=\"fa fa-question-circle\"");

WriteLiteral("></i>\r\n                                    <label");

WriteLiteral(" for=\"\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Do you have phobia?</label>\r\n                                    <select");

WriteLiteral(" id=\"PhobiaOptions\"");

WriteLiteral(" name=\"PhobiaOptions\"");

WriteLiteral(" multiple=\"multiple\"");

WriteLiteral(">\r\n                                        <option");

WriteLiteral(" value=\"default\"");

WriteLiteral(" disabled hidden>Do you have phobia?</option>\r\n");


#line 304 "patientsEMR.cshtml"
                                        

#line default
#line hidden

#line 304 "patientsEMR.cshtml"
                                         foreach (var phobia in @Model.Item6)
                                        {
                                            if (App.PatientEMR.PatientsEMR != null)
                                            {
                                                if (!string.IsNullOrEmpty(App.PatientEMR.PatientsEMR.PatientsClaustrophobic) && App.PatientEMR.PatientsEMR.PatientsClaustrophobic.Split('|').Contains(@phobia.Name))
                                                {


#line default
#line hidden
WriteLiteral("                                                    <option");

WriteAttribute ("value", " value=\"", "\""

#line 310 "patientsEMR.cshtml"
                            , Tuple.Create<string,object,bool> ("", phobia.Name

#line default
#line hidden
, false)
);
WriteLiteral(" selected>");


#line 310 "patientsEMR.cshtml"
                                                                                     Write(phobia.Name);


#line default
#line hidden
WriteLiteral("</option>\r\n");


#line 311 "patientsEMR.cshtml"
                                                }
                                                else
                                                {


#line default
#line hidden
WriteLiteral("                                                    <option");

WriteAttribute ("value", " value=\"", "\""

#line 314 "patientsEMR.cshtml"
                            , Tuple.Create<string,object,bool> ("", phobia.Name

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 314 "patientsEMR.cshtml"
                                                                            Write(phobia.Name);


#line default
#line hidden
WriteLiteral("</option>\r\n");


#line 315 "patientsEMR.cshtml"
                                                }
                                            }
                                            else
                                            {


#line default
#line hidden
WriteLiteral("                                                <option");

WriteAttribute ("value", " value=\"", "\""

#line 319 "patientsEMR.cshtml"
                        , Tuple.Create<string,object,bool> ("", phobia.Name

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 319 "patientsEMR.cshtml"
                                                                        Write(phobia.Name);


#line default
#line hidden
WriteLiteral("</option>\r\n");


#line 320 "patientsEMR.cshtml"
                                            }
                                        }


#line default
#line hidden
WriteLiteral("                                    </select>\r\n                                  " +
"  <span");

WriteLiteral(" style=\"width:8.75px;height:60%;\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-chevron-down\"");

WriteLiteral("></i></span>\r\n                                    <i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\r\n                                    <i");

WriteLiteral(" class=\"fa fa-check disabled invalid color-red-dark\"");

WriteLiteral("></i>\r\n                                    <em></em>\r\n                           " +
"     </div>\r\n                                <!-- Other -->\r\n                   " +
"             <div");

WriteLiteral(" class=\"input-style no-borders no-icon mb-4\"");

WriteLiteral(">\r\n                                    <textarea");

WriteLiteral(" id=\"form7a\"");

WriteLiteral(" placeholder=\"Enter your message\"");

WriteLiteral("\r\n                                              style=\"height: 58px;\"");

WriteLiteral("></textarea>\r\n                                    <label");

WriteLiteral(" for=\"form7a\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Enter your Message</label>\r\n                                </div>\r\n\r\n          " +
"                  </div>\r\n                            <div");

WriteLiteral(" class=\"card card-style bg-white p-4 shadow-0 mb-4\"");

WriteLiteral(" style=\"height:100%;\"");

WriteLiteral(">\r\n                                <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                                    <i");

WriteLiteral(" class=\"fa fa-question-circle\"");

WriteLiteral("></i>\r\n                                    <label");

WriteLiteral(" for=\"\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Social Habits</label>\r\n                                    <select");

WriteLiteral(" id=\"HabitsOptions\"");

WriteLiteral(" name=\"HabitsOptions\"");

WriteLiteral(" multiple=\"multiple\"");

WriteLiteral(" onchange=\"Toggle()\"");

WriteLiteral(">\r\n                                        <option");

WriteLiteral(" value=\"default\"");

WriteLiteral(" disabled hidden>Select Social Habits</option>\r\n");


#line 342 "patientsEMR.cshtml"
                                        

#line default
#line hidden

#line 342 "patientsEMR.cshtml"
                                          
                                            Dictionary<string, string> Habits = new Dictionary<string, string>();
                                            Habits.Add("Alchol", "Alcohol");
                                            Habits.Add("Coffee", "Coffee");
                                            Habits.Add("Tea", "Tea");
                                            Habits.Add("Smoker", "Smoker");
                                            Habits.Add("Drugs", "Recreational Drugs");
                                            Habits.Add("Occupational", "Occupational Hazards/Environmental Exposures");
                                        

#line default
#line hidden
WriteLiteral(";\r\n                                        }\r\n");


#line 352 "patientsEMR.cshtml"
                                        

#line default
#line hidden

#line 352 "patientsEMR.cshtml"
                                         foreach (var habit in Habits)
                                        {
                                            if (App.PatientEMR.PatientsEMR != null)
                                            {
                                                if (!string.IsNullOrEmpty(App.PatientEMR.PatientsEMR.PatientsSocialHabits) && App.PatientEMR.PatientsEMR.PatientsSocialHabits.Split('|').Contains(@habit.Value))
                                                {


#line default
#line hidden
WriteLiteral("                                                    <option");

WriteAttribute ("value", " value=\"", "\""

#line 358 "patientsEMR.cshtml"
                            , Tuple.Create<string,object,bool> ("", habit.Key

#line default
#line hidden
, false)
);
WriteLiteral(" selected>");


#line 358 "patientsEMR.cshtml"
                                                                                   Write(habit.Value);


#line default
#line hidden
WriteLiteral("</option>\r\n");


#line 359 "patientsEMR.cshtml"
                                                }
                                                else
                                                {


#line default
#line hidden
WriteLiteral("                                                    <option");

WriteAttribute ("value", " value=\"", "\""

#line 362 "patientsEMR.cshtml"
                            , Tuple.Create<string,object,bool> ("", habit.Key

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 362 "patientsEMR.cshtml"
                                                                          Write(habit.Value);


#line default
#line hidden
WriteLiteral("</option>\r\n");


#line 363 "patientsEMR.cshtml"
                                                }
                                            }
                                            else
                                            {


#line default
#line hidden
WriteLiteral("                                                <option");

WriteAttribute ("value", " value=\"", "\""

#line 367 "patientsEMR.cshtml"
                        , Tuple.Create<string,object,bool> ("", habit.Key

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 367 "patientsEMR.cshtml"
                                                                      Write(habit.Value);


#line default
#line hidden
WriteLiteral("</option>\r\n");


#line 368 "patientsEMR.cshtml"
                                            }
                                        }


#line default
#line hidden
WriteLiteral("\r\n                                    </select>\r\n");


#line 372 "patientsEMR.cshtml"
                                    

#line default
#line hidden

#line 372 "patientsEMR.cshtml"
                                     if (!string.IsNullOrEmpty(App.PatientEMR.PatientsEMR.PatientsHowMany))
                                    {


#line default
#line hidden
WriteLiteral("                                        <input");

WriteLiteral(" placeholder=\"How many per day?\"");

WriteAttribute ("value", " value=", ""

#line 374 "patientsEMR.cshtml"
                                              , Tuple.Create<string,object,bool> ("", App.PatientEMR.PatientsEMR.PatientsHowMany

#line default
#line hidden
, false)
);
WriteLiteral(" name=\"HabitsInputs\"");

WriteLiteral(" id=\"Alcohol\"");

WriteLiteral(" disabled />\r\n");


#line 375 "patientsEMR.cshtml"
                                    }
                                    else
                                    {


#line default
#line hidden
WriteLiteral("                                        <input");

WriteLiteral(" placeholder=\"How many per day?\"");

WriteLiteral(" name=\"HabitsInputs\"");

WriteLiteral(" id=\"Alcohol\"");

WriteLiteral(" disabled />\r\n");


#line 379 "patientsEMR.cshtml"
                                    }


#line default
#line hidden
WriteLiteral("\r\n");


#line 381 "patientsEMR.cshtml"
                                    

#line default
#line hidden

#line 381 "patientsEMR.cshtml"
                                     if (!string.IsNullOrEmpty(App.PatientEMR.PatientsEMR.PatientsPerCoffee))
                                    {


#line default
#line hidden
WriteLiteral("                                        <input");

WriteLiteral(" placeholder=\"How many per day?\"");

WriteAttribute ("value", " value=", ""

#line 383 "patientsEMR.cshtml"
                                              , Tuple.Create<string,object,bool> ("", App.PatientEMR.PatientsEMR.PatientsPerCoffee

#line default
#line hidden
, false)
);
WriteLiteral(" name=\"HabitsInputs\"");

WriteLiteral(" id=\"Coffee\"");

WriteLiteral(" disabled />\r\n");


#line 384 "patientsEMR.cshtml"
                                    }
                                    else
                                    {


#line default
#line hidden
WriteLiteral("                                        <input");

WriteLiteral(" placeholder=\"How many per day?\"");

WriteLiteral(" name=\"HabitsInputs\"");

WriteLiteral(" id=\"Coffee\"");

WriteLiteral(" disabled />\r\n");


#line 388 "patientsEMR.cshtml"
                                    }


#line default
#line hidden
WriteLiteral("\r\n");


#line 390 "patientsEMR.cshtml"
                                    

#line default
#line hidden

#line 390 "patientsEMR.cshtml"
                                     if (!string.IsNullOrEmpty(App.PatientEMR.PatientsEMR.PatientsPerTea))
                                    {


#line default
#line hidden
WriteLiteral("                                        <input");

WriteLiteral(" placeholder=\"How many per day?\"");

WriteAttribute ("value", " value=", ""

#line 392 "patientsEMR.cshtml"
                                              , Tuple.Create<string,object,bool> ("", App.PatientEMR.PatientsEMR.PatientsPerTea

#line default
#line hidden
, false)
);
WriteLiteral(" name=\"HabitsInputs\"");

WriteLiteral(" id=\"Tea\"");

WriteLiteral(" disabled />\r\n");


#line 393 "patientsEMR.cshtml"
                                    }
                                    else
                                    {


#line default
#line hidden
WriteLiteral("                                        <input");

WriteLiteral(" placeholder=\"How many per day?\"");

WriteLiteral(" name=\"HabitsInputs\"");

WriteLiteral(" id=\"Tea\"");

WriteLiteral(" disabled />\r\n");


#line 397 "patientsEMR.cshtml"
                                    }


#line default
#line hidden
WriteLiteral("\r\n");


#line 399 "patientsEMR.cshtml"
                                    

#line default
#line hidden

#line 399 "patientsEMR.cshtml"
                                     if (!string.IsNullOrEmpty(App.PatientEMR.PatientsEMR.PatientsSmoker))
                                    {


#line default
#line hidden
WriteLiteral("                                        <input");

WriteLiteral(" placeholder=\"How many Cigarettes per day?\"");

WriteAttribute ("value", " value=", ""

#line 401 "patientsEMR.cshtml"
                                                         , Tuple.Create<string,object,bool> ("", App.PatientEMR.PatientsEMR.PatientsSmoker

#line default
#line hidden
, false)
);
WriteLiteral(" name=\"HabitsInputs\"");

WriteLiteral(" id=\"Smoker\"");

WriteLiteral(" disabled />\r\n");


#line 402 "patientsEMR.cshtml"
                                    }
                                    else
                                    {


#line default
#line hidden
WriteLiteral("                                        <input");

WriteLiteral(" placeholder=\"How many Cigarettes per day?\"");

WriteLiteral(" name=\"HabitsInputs\"");

WriteLiteral(" id=\"Smoker\"");

WriteLiteral(" disabled />\r\n");


#line 406 "patientsEMR.cshtml"
                                    }


#line default
#line hidden
WriteLiteral("\r\n");


#line 408 "patientsEMR.cshtml"
                                    

#line default
#line hidden

#line 408 "patientsEMR.cshtml"
                                     if (!string.IsNullOrEmpty(App.PatientEMR.PatientsEMR.PatientsIsRecreationalDrugsDetails))
                                    {


#line default
#line hidden
WriteLiteral("                                        <input");

WriteLiteral(" placeholder=\"Please Specify Drugs\"");

WriteAttribute ("value", " value=", ""

#line 410 "patientsEMR.cshtml"
                                                 , Tuple.Create<string,object,bool> ("", App.PatientEMR.PatientsEMR.PatientsIsRecreationalDrugsDetails

#line default
#line hidden
, false)
);
WriteLiteral(" name=\"HabitsInputs\"");

WriteLiteral(" id=\"Drugs\"");

WriteLiteral(" disabled />\r\n");


#line 411 "patientsEMR.cshtml"
                                    }
                                    else
                                    {


#line default
#line hidden
WriteLiteral("                                        <input");

WriteLiteral(" placeholder=\"Please Specify Drugs\"");

WriteLiteral(" name=\"HabitsInputs\"");

WriteLiteral(" id=\"Drugs\"");

WriteLiteral(" disabled />\r\n");


#line 415 "patientsEMR.cshtml"
                                    }


#line default
#line hidden
WriteLiteral("\r\n");


#line 417 "patientsEMR.cshtml"
                                    

#line default
#line hidden

#line 417 "patientsEMR.cshtml"
                                     if (!string.IsNullOrEmpty(App.PatientEMR.PatientsEMR.PatientsOccupationalHazardsDetails))
                                    {


#line default
#line hidden
WriteLiteral("                                        <input");

WriteLiteral(" placeholder=\"Please Specify Occupational Hazards / Environmental Exposures\"");

WriteAttribute ("value", " value=", ""

#line 419 "patientsEMR.cshtml"
                                                                                          , Tuple.Create<string,object,bool> ("", App.PatientEMR.PatientsEMR.PatientsOccupationalHazardsDetails

#line default
#line hidden
, false)
);
WriteLiteral(" name=\"HabitsInputs\"");

WriteLiteral(" id=\"Occupational\"");

WriteLiteral(" disabled />\r\n");


#line 420 "patientsEMR.cshtml"
                                    }
                                    else
                                    {


#line default
#line hidden
WriteLiteral("                                        <input");

WriteLiteral(" placeholder=\"Please Specify Occupational Hazards / Environmental Exposures\"");

WriteLiteral(" name=\"HabitsInputs\"");

WriteLiteral(" id=\"Occupational\"");

WriteLiteral(" disabled />\r\n");


#line 424 "patientsEMR.cshtml"
                                    }


#line default
#line hidden
WriteLiteral("\r\n\r\n                                    <span");

WriteLiteral(" style=\"width:8.75px;height:60%;\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-chevron-down\"");

WriteLiteral("></i></span>\r\n                                    <i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\r\n                                    <i");

WriteLiteral(" class=\"fa fa-check disabled invalid color-red-dark\"");

WriteLiteral("></i>\r\n                                    <em></em>\r\n                           " +
"     </div>\r\n                                <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                                    <i");

WriteLiteral(" class=\"fa fa-question-circle\"");

WriteLiteral("></i>\r\n");


#line 434 "patientsEMR.cshtml"
                                    

#line default
#line hidden

#line 434 "patientsEMR.cshtml"
                                     if (!string.IsNullOrWhiteSpace(App.PatientEMR.PatientsEMR.PatientsSocialNotes))
                                    {


#line default
#line hidden
WriteLiteral("                                        <input");

WriteLiteral(" type=\"name\"");

WriteLiteral(" class=\"form-control validate-name\"");

WriteAttribute ("value", " value=", ""

#line 436 "patientsEMR.cshtml"
                                                             , Tuple.Create<string,object,bool> ("", App.PatientEMR.PatientsEMR.PatientsSocialNotes

#line default
#line hidden
, false)
);
WriteLiteral(" id=\"SocialNotes\"");

WriteLiteral("\r\n                                           placeholder=\"Comments\"");

WriteLiteral(">\r\n");


#line 438 "patientsEMR.cshtml"
                                    }
                                    else
                                    {


#line default
#line hidden
WriteLiteral("                                        <input");

WriteLiteral(" type=\"name\"");

WriteLiteral(" class=\"form-control validate-name\"");

WriteLiteral(" id=\"SocialNotes\"");

WriteLiteral("\r\n                                           placeholder=\"Comments\"");

WriteLiteral(">\r\n");


#line 443 "patientsEMR.cshtml"
                                    }


#line default
#line hidden
WriteLiteral("                                    <label");

WriteLiteral(" for=\"\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Comments</label>\r\n                                    <i");

WriteLiteral(" class=\"fa fa-times disabled invalid color-red-dark\"");

WriteLiteral("></i>\r\n                                    <i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\r\n                                </div>\r\n                            </div>" +
"\r\n                            <div");

WriteLiteral(" class=\"card card-style bg-white p-4 shadow-0 mb-4\"");

WriteLiteral(" style=\"height:100%;\"");

WriteLiteral(">\r\n                                <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                                    <i");

WriteLiteral(" class=\"fa fa-question-circle\"");

WriteLiteral("></i>\r\n");


#line 452 "patientsEMR.cshtml"
                                    

#line default
#line hidden

#line 452 "patientsEMR.cshtml"
                                     if (!string.IsNullOrWhiteSpace(App.PatientEMR.PatientsEMR.PatientsSurgeryHistory))
                                    {


#line default
#line hidden
WriteLiteral("                                        <input");

WriteLiteral(" type=\"name\"");

WriteLiteral(" class=\"form-control validate-name\"");

WriteAttribute ("value", " value=", ""

#line 454 "patientsEMR.cshtml"
                                                             , Tuple.Create<string,object,bool> ("", App.PatientEMR.PatientsEMR.PatientsSurgeryHistory

#line default
#line hidden
, false)
);
WriteLiteral(" id=\"SurgeryNotes\"");

WriteLiteral("\r\n                                           placeholder=\"Previous Surgeries\"");

WriteLiteral(">\r\n");


#line 456 "patientsEMR.cshtml"
                                    }
                                    else
                                    {


#line default
#line hidden
WriteLiteral("                                        <input");

WriteLiteral(" type=\"name\"");

WriteLiteral(" class=\"form-control validate-name\"");

WriteLiteral(" id=\"SurgeryNotes\"");

WriteLiteral("\r\n                                           placeholder=\"Previous Surgeries\"");

WriteLiteral(">\r\n");


#line 461 "patientsEMR.cshtml"
                                    }


#line default
#line hidden
WriteLiteral("                                    <label");

WriteLiteral(" for=\"\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Previous Surgeries</label>\r\n                                    <i");

WriteLiteral(" class=\"fa fa-times disabled invalid color-red-dark\"");

WriteLiteral("></i>\r\n                                    <i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\r\n                                </div>\r\n                            </div>" +
"\r\n                        </div>\r\n                        <div");

WriteLiteral(" class=\"clearfix mb-5 mt-3\"");

WriteLiteral("></div>\r\n                    </div>\r\n                    <!-- Review -->\r\n       " +
"             <div");

WriteLiteral(" data-bs-parent=\"#tab-group-2\"");

WriteLiteral(" class=\"collapse\"");

WriteLiteral(" id=\"tab-7\"");

WriteLiteral(">\r\n                        <div");

WriteLiteral(" class=\"contnet pb-3\"");

WriteLiteral(">\r\n                            <div");

WriteLiteral(" class=\"card card-style mx-0 \"");

WriteLiteral(">\r\n                                <div");

WriteLiteral(" class=\"content\"");

WriteLiteral(">\r\n");


#line 475 "patientsEMR.cshtml"
                                    

#line default
#line hidden

#line 475 "patientsEMR.cshtml"
                                     foreach (var Section in @Model.Item7)
                                    {


#line default
#line hidden
WriteLiteral("                                        <i");

WriteLiteral(" class=\"fa fa-chart-line float-start ms-3 mt-3 fa-2x color-gray-dark\"");

WriteLiteral("></i>\r\n");

WriteLiteral("                                        <h2");

WriteLiteral(" class=\"float-start ms-3 mt-3\"");

WriteLiteral(">");


#line 478 "patientsEMR.cshtml"
                                                                     Write(Section.Name);


#line default
#line hidden
WriteLiteral("</h2>\r\n");

WriteLiteral("                                        <div");

WriteLiteral(" class=\"content mt-n1 px-3\"");

WriteLiteral(">\r\n                                            <div");

WriteLiteral(" class=\"row\"");

WriteLiteral(">\r\n");


#line 481 "patientsEMR.cshtml"
                                                

#line default
#line hidden

#line 481 "patientsEMR.cshtml"
                                                 foreach (var child in @Section.ChildList)
                                                {


#line default
#line hidden
WriteLiteral("                                                    <div");

WriteLiteral(" class=\"col-4 d-flex align-items-baseline my-1\"");

WriteLiteral(">\r\n                                                        <div");

WriteLiteral(" class=\"form-check icon-check\"");

WriteLiteral(">\r\n                                                            <input");

WriteLiteral(" class=\"form-check-input\"");

WriteLiteral(" type=\"checkbox\"");

WriteAttribute ("value", " value=\"", "\""

#line 485 "patientsEMR.cshtml"
                                                                            , Tuple.Create<string,object,bool> ("", Section.Id

#line default
#line hidden
, false)
, Tuple.Create<string,object,bool> ("", "|", true)

#line 485 "patientsEMR.cshtml"
                                                                                        , Tuple.Create<string,object,bool> ("", child.Id

#line default
#line hidden
, false)
, Tuple.Create<string,object,bool> ("", "|", true)

#line 485 "patientsEMR.cshtml"
                                                                                                  , Tuple.Create<string,object,bool> ("", Section.Name

#line default
#line hidden
, false)
, Tuple.Create<string,object,bool> ("", "|", true)

#line 485 "patientsEMR.cshtml"
                                                                                                                , Tuple.Create<string,object,bool> ("", child.Name

#line default
#line hidden
, false)
);
WriteAttribute ("id", " id=\"", "\""

#line 485 "patientsEMR.cshtml"
                                                                                                                                 , Tuple.Create<string,object,bool> ("", child.Id

#line default
#line hidden
, false)
);
WriteLiteral(" name=\"ReviewOptions\"");

WriteLiteral(" ");


#line 485 "patientsEMR.cshtml"
                                                                                                                                                                                                    Write(Model.Item8.Contains(child.Id) ? "checked" : "");


#line default
#line hidden
WriteLiteral(">\r\n                                                            <label");

WriteLiteral(" class=\"form-check-label\"");

WriteAttribute ("for", " for=\"", "\""

#line 486 "patientsEMR.cshtml"
                                                          , Tuple.Create<string,object,bool> ("", child.Id

#line default
#line hidden
, false)
);
WriteLiteral(" ");


#line 486 "patientsEMR.cshtml"
                                                                                                        Write(Model.Item8.Contains(child.Id) ? "checked" : "");


#line default
#line hidden
WriteLiteral(">");


#line 486 "patientsEMR.cshtml"
                                                                                                                                                          Write(child.Name);


#line default
#line hidden
WriteLiteral("</label>\r\n                                                            <i");

WriteLiteral(" class=\"icon-check-1 far fa-square color-gray-dark font-16\"");

WriteLiteral("></i>\r\n                                                            <i");

WriteLiteral(" class=\"icon-check-2 far fa-check-square font-16 color-orange-dark\"");

WriteLiteral("></i>\r\n                                                        </div>\r\n          " +
"                                              ");

WriteLiteral("\r\n                                                    </div>\r\n");


#line 492 "patientsEMR.cshtml"
                                                }


#line default
#line hidden
WriteLiteral("                                            </div>\r\n                             " +
"           </div>\r\n");


#line 495 "patientsEMR.cshtml"
                                    }


#line default
#line hidden
WriteLiteral("                                </div>\r\n                            </div>\r\n     " +
"                       <div");

WriteLiteral(" class=\"clearfix mb-5 mt-3\"");

WriteLiteral("></div>\r\n                        </div>\r\n                    </div>\r\n            " +
"    </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- PopUp Add New Exa" +
"mination -->\r\n        <div");

WriteLiteral(" id=\"newExamination\"");

WriteLiteral(" class=\"menu menu-box-bottom menu-box-detached\"");

WriteLiteral(">\r\n            <div");

WriteLiteral(" class=\"divider mx-auto mt-3 bg-gray-dark opacity-30 rounded-s mb-n1\"");

WriteLiteral(" style=\"height:5px; width:50px;\"");

WriteLiteral(">\r\n            </div>\r\n            <div");

WriteLiteral(" class=\"menu-title mt-0 pt-0\"");

WriteLiteral(">\r\n                <h1>Add New Examination</h1>\r\n                <p");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Patients EMR</p><a");

WriteLiteral(" href=\"#\"");

WriteLiteral(" class=\"close-menu\"");

WriteLiteral(">\r\n                    <i");

WriteLiteral(" class=\"fa fa-times\"");

WriteLiteral("></i>\r\n                </a>\r\n            </div>\r\n            <div");

WriteLiteral(" class=\"divider divider-margins mb-n2\"");

WriteLiteral("></div>\r\n\r\n            <div");

WriteLiteral(" class=\"content\"");

WriteLiteral(">\r\n                <div");

WriteLiteral(" class=\"list-group\"");

WriteLiteral(">\r\n                    <!-- SELECT Chief complaint -->\r\n                    <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                        <i");

WriteLiteral(" class=\"fa fa-question-circle\"");

WriteLiteral("></i>\r\n                        <label");

WriteLiteral(" for=\"\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Chief complaint</label>\r\n                        <select");

WriteLiteral(" id=\"\"");

WriteLiteral(">\r\n                            <option");

WriteLiteral(" value=\"default\"");

WriteLiteral(" disabled selected>Chief complaint</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Chief complaint 1</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Chief complaint 2</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Chief complaint 3</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Chief complaint 4</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Chief complaint 5</option>\r\n                        </select>\r\n                 " +
"       <span");

WriteLiteral(" style=\"width:8.75px;height:60%;\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-chevron-down\"");

WriteLiteral("></i></span>\r\n                        <i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\r\n                        <i");

WriteLiteral(" class=\"fa fa-check disabled invalid color-red-dark\"");

WriteLiteral("></i>\r\n                        <em></em>\r\n                    </div>\r\n           " +
"         <!-- SELECT Vital signs -->\r\n                    <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                        <i");

WriteLiteral(" class=\"fa fa-question-circle\"");

WriteLiteral("></i>\r\n                        <label");

WriteLiteral(" for=\"\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Vital signs</label>\r\n                        <select");

WriteLiteral(" id=\"\"");

WriteLiteral(">\r\n                            <option");

WriteLiteral(" value=\"default\"");

WriteLiteral(" disabled selected>Vital signs</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Vital signs 1</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Vital signs 2</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Vital signs 3</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Vital signs 4</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Vital signs 5</option>\r\n                        </select>\r\n                     " +
"   <span");

WriteLiteral(" style=\"width:8.75px;height:60%;\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-chevron-down\"");

WriteLiteral("></i></span>\r\n                        <i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\r\n                        <i");

WriteLiteral(" class=\"fa fa-check disabled invalid color-red-dark\"");

WriteLiteral("></i>\r\n                        <em></em>\r\n                    </div>\r\n           " +
"         <!-- SELECT Examination -->\r\n                    <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                        <i");

WriteLiteral(" class=\"fa fa-question-circle\"");

WriteLiteral("></i>\r\n                        <label");

WriteLiteral(" for=\"\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Examination</label>\r\n                        <select");

WriteLiteral(" id=\"\"");

WriteLiteral(">\r\n                            <option");

WriteLiteral(" value=\"default\"");

WriteLiteral(" disabled selected>Examination</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Examination 1</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Examination 2</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Examination 3</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Examination 4</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Examination 5</option>\r\n                        </select>\r\n                     " +
"   <span");

WriteLiteral(" style=\"width:8.75px;height:60%;\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-chevron-down\"");

WriteLiteral("></i></span>\r\n                        <i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\r\n                        <i");

WriteLiteral(" class=\"fa fa-check disabled invalid color-red-dark\"");

WriteLiteral("></i>\r\n                        <em></em>\r\n                    </div>\r\n           " +
"         <!-- SELECT Provisional Diagnosis -->\r\n                    <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                        <i");

WriteLiteral(" class=\"fa fa-question-circle\"");

WriteLiteral("></i>\r\n                        <label");

WriteLiteral(" for=\"\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Provisional Diagnosis</label>\r\n                        <select");

WriteLiteral(" id=\"\"");

WriteLiteral(">\r\n                            <option");

WriteLiteral(" value=\"default\"");

WriteLiteral(" disabled selected>Provisional Diagnosis</option>\r\n                            <o" +
"ption");

WriteLiteral(" value=\"\"");

WriteLiteral(">Provisional Diagnosis 1</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Provisional Diagnosis 2</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Provisional Diagnosis 3</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Provisional Diagnosis 4</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Provisional Diagnosis 5</option>\r\n                        </select>\r\n           " +
"             <span");

WriteLiteral(" style=\"width:8.75px;height:60%;\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-chevron-down\"");

WriteLiteral("></i></span>\r\n                        <i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\r\n                        <i");

WriteLiteral(" class=\"fa fa-check disabled invalid color-red-dark\"");

WriteLiteral("></i>\r\n                        <em></em>\r\n                    </div>\r\n           " +
"         <!-- SELECT Investigations -->\r\n                    <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                        <i");

WriteLiteral(" class=\"fa fa-question-circle\"");

WriteLiteral("></i>\r\n                        <label");

WriteLiteral(" for=\"\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Investigations</label>\r\n                        <select");

WriteLiteral(" id=\"\"");

WriteLiteral(">\r\n                            <option");

WriteLiteral(" value=\"default\"");

WriteLiteral(" disabled selected>Investigations</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Investigations 1</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Investigations 2</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Investigations 3</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Investigations 4</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Investigations 5</option>\r\n                        </select>\r\n                  " +
"      <span");

WriteLiteral(" style=\"width:8.75px;height:60%;\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-chevron-down\"");

WriteLiteral("></i></span>\r\n                        <i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\r\n                        <i");

WriteLiteral(" class=\"fa fa-check disabled invalid color-red-dark\"");

WriteLiteral("></i>\r\n                        <em></em>\r\n                    </div>\r\n           " +
"         <!-- SELECT Diagnosis -->\r\n                    <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                        <i");

WriteLiteral(" class=\"fa fa-question-circle\"");

WriteLiteral("></i>\r\n                        <label");

WriteLiteral(" for=\"\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Diagnosis</label>\r\n                        <select");

WriteLiteral(" id=\"\"");

WriteLiteral(">\r\n                            <option");

WriteLiteral(" value=\"default\"");

WriteLiteral(" disabled selected>Diagnosis</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Diagnosis 1</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Diagnosis 2</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Diagnosis 3</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Diagnosis 4</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Diagnosis 5</option>\r\n                        </select>\r\n                       " +
" <span");

WriteLiteral(" style=\"width:8.75px;height:60%;\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-chevron-down\"");

WriteLiteral("></i></span>\r\n                        <i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\r\n                        <i");

WriteLiteral(" class=\"fa fa-check disabled invalid color-red-dark\"");

WriteLiteral("></i>\r\n                        <em></em>\r\n                    </div>\r\n           " +
"         <!-- SELECT Prescription -->\r\n                    <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                        <i");

WriteLiteral(" class=\"fa fa-question-circle\"");

WriteLiteral("></i>\r\n                        <label");

WriteLiteral(" for=\"\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Prescription</label>\r\n                        <select");

WriteLiteral(" id=\"\"");

WriteLiteral(">\r\n                            <option");

WriteLiteral(" value=\"default\"");

WriteLiteral(" disabled selected>Prescription</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Prescription 1</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Prescription 2</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Prescription 3</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Prescription 4</option>\r\n                            <option");

WriteLiteral(" value=\"\"");

WriteLiteral(">Prescription 5</option>\r\n                        </select>\r\n                    " +
"    <span");

WriteLiteral(" style=\"width:8.75px;height:60%;\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-chevron-down\"");

WriteLiteral("></i></span>\r\n                        <i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\r\n                        <i");

WriteLiteral(" class=\"fa fa-check disabled invalid color-red-dark\"");

WriteLiteral("></i>\r\n                        <em></em>\r\n                    </div>\r\n\r\n         " +
"       </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"Sticky53/scripts/bootstrap.min.js\"");

WriteLiteral("></script>\r\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"Sticky53/scripts/custom.js\"");

WriteLiteral("></script>\r\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"Sticky/scripts/EDS.js\"");

WriteLiteral("></script>\r\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"Sticky/scripts/jquery-3.6.0.min.js\"");

WriteLiteral("></script>\r\n    <script>\r\n        Toggle();\r\n                // const pageSet = d" +
"ocument.getElementById(\"page\");\r\n                // pageSet.children[2].removeAt" +
"tribute(\"style\");\r\n                // pageSet.children[2].classList.add(\"bg-dark" +
"\");\r\n\r\n                // if the scrollY more than 230px fixed tab to top\r\n     " +
"           window.onscroll = function (ev) {\r\n                    const tabInScr" +
"ollY = document.getElementById(\"tabInScrollY\");\r\n                    if ((window" +
".scrollY) >= 230) {\r\n                        tabInScrollY.classList.add(\"fixed-t" +
"op\", \"shadow\");\r\n                        tabInScrollY.classList.remove(\"card-sty" +
"le\");\r\n                        tabInScrollY.style.top = \"74px\";\r\n               " +
"     }\r\n                    else if ((window.scrollY) <= 200) {\r\n               " +
"         tabInScrollY.classList.remove(\"fixed-top\", \"shadow\");\r\n                " +
"        tabInScrollY.classList.add(\"card-style\");\r\n                        tabIn" +
"ScrollY.style.top = \"0px\";\r\n                    }\r\n                };\r\n         " +
"       function getUrl(select) {\r\n                    var currentUrl = $(select)" +
".attr(\'href\');\r\n                    return currentUrl;\r\n                }\r\n     " +
"   function Toggle()\r\n        {\r\n            debugger;\r\n            var values =" +
" $(\'#HabitsOptions\').val();\r\n            var ReviewValues = document.getElements" +
"ByName(\"ReviewOptions\");\r\n            var elements = document.getElementsByName(" +
"\"HabitsInputs\");\r\n\r\n            elements.forEach(myFunction);\r\n            funct" +
"ion myFunction(item, index)\r\n            {\r\n        ");

WriteLiteral(@"
                elements[index].disabled = true;

                if(values.includes(item.id))
                {
                    elements[index].disabled = false;
                    //elements[index].style.display = ""block"";
                }
            }
        }

                //
    </script>
</body>
</html>");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class patientsEMRBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
