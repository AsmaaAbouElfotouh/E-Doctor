#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EDSDoctorsApp.HtmlViews2
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#line 1 "basicInfo.cshtml"
using EDSDoctorsApp.Resources;

#line default
#line hidden

#line 2 "basicInfo.cshtml"
using EDSDoctorsApp;

#line default
#line hidden

#line 3 "basicInfo.cshtml"
using EDSDoctorsApp.APIs.Account;

#line default
#line hidden

#line 4 "basicInfo.cshtml"
using Xamarin.Essentials;

#line default
#line hidden


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "17.1.0.269")]
public partial class basicInfo : basicInfoBase
{

#line hidden

#line 5 "basicInfo.cshtml"
public List<VmAttachments> Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("<!DOCTYPE HTML>\r\n<html");

WriteLiteral(" lang=\"en\"");

WriteLiteral(">\r\n\r\n<head>\r\n    <meta");

WriteLiteral(" http-equiv=\"Content-Type\"");

WriteLiteral(" content=\"text/html; charset=utf-8\"");

WriteLiteral(" />\r\n    <meta");

WriteLiteral(" name=\"apple-mobile-web-app-capable\"");

WriteLiteral(" content=\"yes\"");

WriteLiteral(">\r\n    <meta");

WriteLiteral(" name=\"apple-mobile-web-app-status-bar-style\"");

WriteLiteral(" content=\"black-translucent\"");

WriteLiteral(">\r\n    <meta");

WriteLiteral(" name=\"viewport\"");

WriteLiteral("\r\n          content=\"width=device-width, initial-scale=1, minimum-scale=1, maximu" +
"m-scale=1, viewport-fit=cover\"");

WriteLiteral(" />\r\n    ");

WriteLiteral("\r\n    <link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" type=\"text/css\"");

WriteAttribute ("href", " href=\"", "\""

#line 16 "basicInfo.cshtml"
          , Tuple.Create<string,object,bool> ("", string.Concat("Sticky53/styles/bootstrap",AppResources.dir2,".css")

#line default
#line hidden
, false)
);
WriteLiteral(">\r\n    <link");

WriteLiteral(" href=\"Sticky53/fonts/css.css?family=Roboto:300,300i,400,400i,500,500i,700,700i,9" +
"00,900i|Source+Sans+Pro:300,300i,400,400i,600,600i,700,700i,900,900i&display=swa" +
"p\"");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(">\r\n    ");

WriteLiteral("\r\n    <link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" type=\"text/css\"");

WriteLiteral(" href=\"Sticky53/fonts/css/fontawesome-all.min.css\"");

WriteLiteral(">\r\n\r\n    <link");

WriteLiteral(" rel=\"manifest\"");

WriteLiteral(" href=\"_manifest.json\"");

WriteLiteral(" data-pwa-version=\"set_in_manifest_and_pwa_js\"");

WriteLiteral(">\r\n    <link");

WriteLiteral(" rel=\"apple-touch-icon\"");

WriteLiteral(" sizes=\"180x180\"");

WriteLiteral(" href=\"Sticky53/app/icons/icon-192x192.png\"");

WriteLiteral(">\r\n\r\n</head>\r\n\r\n<body");

WriteLiteral(" class=\"theme-light\"");

WriteLiteral(" data-highlight=\"highlight-dark\"");

WriteLiteral(" data-gradient=\"body-default\"");

WriteLiteral(">\r\n    <div");

WriteLiteral(" id=\"preloader\"");

WriteLiteral(">\r\n        <div");

WriteLiteral(" class=\"spinner-border color-highlight\"");

WriteLiteral(" role=\"status\"");

WriteLiteral("></div>\r\n    </div>\r\n    <div");

WriteLiteral(" id=\"page\"");

WriteLiteral(">\r\n        <div");

WriteLiteral(" class=\"header header-fixed header-logo-center \"");

WriteLiteral(" id=\"headerScope\"");

WriteLiteral(">\r\n            <p");

WriteLiteral(" class=\"header-title\"");

WriteLiteral(">Basic Info</p>\r\n            <a");

WriteLiteral(" href=\"hybrid:goback\"");

WriteLiteral(" data-back-button");

WriteLiteral(" class=\"header-icon header-icon-1\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fas fa-arrow-left\"");

WriteLiteral("></i></a>\r\n            <a");

WriteLiteral(" href=\"hybrid:GotoHome\"");

WriteLiteral(" class=\"header-icon header-icon-4\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fas fa-home\"");

WriteLiteral("></i></a>\r\n        </div>\r\n        <div");

WriteLiteral(" id=\"footer-bar\"");

WriteLiteral(" class=\"footer-bar-1\"");

WriteLiteral(">\r\n            <a");

WriteLiteral(" href=\"hybrid:gotobasicinfo\"");

WriteLiteral(" class=\"active-nav\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-info-circle\"");

WriteLiteral("></i><span>Basic Info</span></a>\r\n            <a");

WriteLiteral(" href=\"hybrid:gotovitalsigns\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-heartbeat\"");

WriteLiteral("></i><span>Vital Signs</span></a>\r\n            <a");

WriteLiteral(" href=\"hybrid:gotogallery\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-images\"");

WriteLiteral("></i><span>Gallery</span></a>\r\n        </div>\r\n        <div");

WriteLiteral(" class=\"page-content header-clear-medium\"");

WriteLiteral(">\r\n            <div");

WriteLiteral(" class=\"card card-style\"");

WriteLiteral(">\r\n                <div");

WriteLiteral(" class=\"content\"");

WriteLiteral(">\r\n                    <form");

WriteLiteral(" action=\"hybrid:savebasicinfo\"");

WriteLiteral(" enctype=\"multipart/form-data\"");

WriteLiteral(">\r\n                        <!-- Name -->\r\n                        <input");

WriteLiteral(" name=\"Profile\"");

WriteLiteral(" hidden />\r\n                        <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                            <i");

WriteLiteral(" class=\"fa fa-user-circle\"");

WriteLiteral("></i>\r\n                            <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" name=\"PatientName\"");

WriteLiteral(" class=\"form-control validate-name\"");

WriteAttribute ("value", " value=\"", "\""

#line 49 "basicInfo.cshtml"
                                                                     , Tuple.Create<string,object,bool> ("", App.PatientEMR.PatientsName

#line default
#line hidden
, false)
);
WriteLiteral(" id=\"form1i\"");

WriteLiteral(" placeholder=\"Name\"");

WriteLiteral(">\r\n                            <label");

WriteLiteral(" for=\"form1i\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Name</label>\r\n                            <i");

WriteLiteral(" class=\"fa fa-times disabled invalid color-red-dark\"");

WriteLiteral("></i>\r\n                            <i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\r\n                            <!-- <em>(required)</em> -->\r\n                " +
"        </div>\r\n                        <!-- SELECT  Nationality -->\r\n          " +
"              <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                            <i");

WriteLiteral(" class=\"fa fa-user-circle\"");

WriteLiteral("></i>\r\n                            <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" name=\"PatientNationality\"");

WriteLiteral(" class=\"form-control validate-name\"");

WriteAttribute ("value", " value=\"", "\""

#line 58 "basicInfo.cshtml"
                                                                            , Tuple.Create<string,object,bool> ("", App.PatientEMR.PatientsNationality

#line default
#line hidden
, false)
);
WriteLiteral(" id=\"form1i\"");

WriteLiteral(" placeholder=\"Nationality\"");

WriteLiteral(">\r\n                            <label");

WriteLiteral(" for=\"form1i\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Nationality</label>\r\n                            <i");

WriteLiteral(" class=\"fa fa-times disabled invalid color-red-dark\"");

WriteLiteral("></i>\r\n                            <i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\r\n                            <!-- <em>(required)</em> -->\r\n                " +
"        </div>\r\n                        ");

WriteLiteral("\r\n                        <!-- ID/Passport -->\r\n                        <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                            <i");

WriteLiteral(" class=\"fa fa-passport\"");

WriteLiteral("></i>\r\n                            <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" name=\"PatientNationalityID\"");

WriteLiteral(" class=\"form-control validate-name\"");

WriteAttribute ("value", " value=\"", "\""

#line 80 "basicInfo.cshtml"
                                                                              , Tuple.Create<string,object,bool> ("", App.PatientEMR.PatientsNationalID

#line default
#line hidden
, false)
);
WriteLiteral(" id=\"form1i\"");

WriteLiteral(" placeholder=\"ID/Passport\"");

WriteLiteral(">\r\n                            <label");

WriteLiteral(" for=\"form1i\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">ID/Passport</label>\r\n                            <i");

WriteLiteral(" class=\"fa fa-times disabled invalid color-red-dark\"");

WriteLiteral("></i>\r\n                            <i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\r\n                            <!-- <em>(required)</em> -->\r\n                " +
"        </div>\r\n                        <!-- DoB -->\r\n                        <d" +
"iv");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                            <i");

WriteLiteral(" class=\"fa fa-birthday-cake\"");

WriteLiteral(" style=\"padding-top:5px\"");

WriteLiteral("></i>\r\n                            <input");

WriteLiteral(" type=\"date\"");

WriteLiteral(" name=\"PatientDOB\"");

WriteLiteral(" style=\"background-color:white;-webkit-appearance: none\"");

WriteAttribute ("value", " value=\"", "\""

#line 89 "basicInfo.cshtml"
                                                                                          , Tuple.Create<string,object,bool> ("", Convert.ToDateTime(App.PatientEMR.PatientsDOB).ToString("yyyy-MM-dd")

#line default
#line hidden
, false)
);
WriteLiteral(" max=\"2030-01-01\"");

WriteLiteral(" min=\"2021-01-01\"");

WriteLiteral("\r\n                                   class=\"form-control validate-text\"");

WriteLiteral(" id=\"\"");

WriteLiteral(" placeholder=\"DoB\"");

WriteLiteral(">\r\n                            <label");

WriteLiteral(" for=\"\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Select Date</label>\r\n                            <i");

WriteLiteral(" class=\"fa fa-check disabled valid me-4 pe-3 font-12 color-green-dark\"");

WriteLiteral("></i>\r\n                            <i");

WriteLiteral(" class=\"fa fa-check disabled invalid me-4 pe-3 font-12 color-red-dark\"");

WriteLiteral("></i>\r\n                        </div>\r\n                        <!-- SELECT  Gende" +
"r -->\r\n                        <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                            <i");

WriteLiteral(" class=\"fa fa-venus-mars\"");

WriteLiteral("></i>\r\n                            <label");

WriteLiteral(" for=\"form1f\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Gender</label>\r\n                            <select");

WriteLiteral(" id=\"form1f\"");

WriteLiteral(" name=\"PatientGender\"");

WriteLiteral(" style=\"background-color:white\"");

WriteLiteral(">\r\n                                <option");

WriteLiteral(" value=\"default\"");

WriteLiteral(" disabled selected>Select Gender</option>\r\n                                <optio" +
"n");

WriteLiteral(" value=\"Male\"");

WriteLiteral(" ");


#line 101 "basicInfo.cshtml"
                                                       
                                        if(App.PatientEMR.PatientsGender == "Male"){


#line default
#line hidden
WriteLiteral("                                        ");

WriteLiteral("Selected");

WriteLiteral("\r\n");


#line 104 "basicInfo.cshtml"
}


#line default
#line hidden
WriteLiteral(">Male</option>\r\n                                <option");

WriteLiteral(" value=\"Female\"");

WriteLiteral(" ");


#line 106 "basicInfo.cshtml"
                                                         
                                        if(App.PatientEMR.PatientsGender == "Female"){


#line default
#line hidden
WriteLiteral("                                        ");

WriteLiteral("Selected");

WriteLiteral("\r\n");


#line 109 "basicInfo.cshtml"
}


#line default
#line hidden
WriteLiteral(">Female</option>\r\n                            </select>\r\n                        " +
"    <span");

WriteLiteral(" style=\"width:8.75px;height:60%;\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-chevron-down\"");

WriteLiteral("></i></span>\r\n                            <i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\r\n                            <i");

WriteLiteral(" class=\"fa fa-check disabled invalid color-red-dark\"");

WriteLiteral("></i>\r\n                            <!-- <em>(required)</em> -->\r\n                " +
"        </div>\r\n                        <!-- Mobile -->\r\n                       " +
" <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                            <i");

WriteLiteral(" class=\"fa fa-mobile\"");

WriteLiteral("></i>\r\n                            <input");

WriteLiteral(" type=\"tel\"");

WriteLiteral(" name=\"PatientMobile\"");

WriteLiteral(" class=\"form-control validate-text\"");

WriteAttribute ("value", " value=\"", "\""

#line 120 "basicInfo.cshtml"
                                                                      , Tuple.Create<string,object,bool> ("", App.PatientEMR.PatientsMobile

#line default
#line hidden
, false)
);
WriteLiteral(" id=\"\"");

WriteLiteral(" placeholder=\"Mobile\"");

WriteLiteral(">\r\n                            <label");

WriteLiteral(" for=\"\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Mobile</label>\r\n                            <i");

WriteLiteral(" class=\"fa fa-times invalid color-red-dark disabled\"");

WriteLiteral("></i>\r\n                            <i");

WriteLiteral(" class=\"fa fa-check valid color-green-dark disabled\"");

WriteLiteral("></i>\r\n                            <!-- <em class=\"disabled\">(required)</em> -->\r" +
"\n                        </div>\r\n                        <!-- Phone -->\r\n       " +
"                 <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                            <i");

WriteLiteral(" class=\"fa fa-phone\"");

WriteLiteral("></i>\r\n                            <input");

WriteLiteral(" type=\"tel\"");

WriteLiteral(" name=\"PatientPhone\"");

WriteLiteral(" class=\"form-control validate-text\"");

WriteAttribute ("value", " value=\"", "\""

#line 129 "basicInfo.cshtml"
                                                                     , Tuple.Create<string,object,bool> ("", App.PatientEMR.PatientsPhone

#line default
#line hidden
, false)
);
WriteLiteral(" id=\"\"");

WriteLiteral(" placeholder=\"Phone\"");

WriteLiteral(">\r\n                            <label");

WriteLiteral(" for=\"\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Phone</label>\r\n                            <i");

WriteLiteral(" class=\"fa fa-times invalid color-red-dark disabled\"");

WriteLiteral("></i>\r\n                            <i");

WriteLiteral(" class=\"fa fa-check valid color-green-dark disabled\"");

WriteLiteral("></i>\r\n                            <!-- <em class=\"disabled\">(required)</em> -->\r" +
"\n                        </div>\r\n                        <!-- Email -->\r\n       " +
"                 <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                            <i");

WriteLiteral(" class=\"fa fa-mail-bulk\"");

WriteLiteral("></i>\r\n                            <input");

WriteLiteral(" type=\"email\"");

WriteLiteral(" name=\"PatientEmail\"");

WriteLiteral(" class=\"form-control validate-text\"");

WriteAttribute ("value", " value=\"", "\""

#line 138 "basicInfo.cshtml"
                                                                       , Tuple.Create<string,object,bool> ("", App.PatientEMR.PatientsEmail

#line default
#line hidden
, false)
);
WriteLiteral(" id=\"\"");

WriteLiteral(" placeholder=\"Email\"");

WriteLiteral(">\r\n                            <label");

WriteLiteral(" for=\"\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Email</label>\r\n                            <i");

WriteLiteral(" class=\"fa fa-times invalid color-red-dark disabled\"");

WriteLiteral("></i>\r\n                            <i");

WriteLiteral(" class=\"fa fa-check valid color-green-dark disabled\"");

WriteLiteral("></i>\r\n                            <!-- <em class=\"\">(required)</em> -->\r\n       " +
"                 </div>\r\n                        <!-- Address -->\r\n             " +
"           <div");

WriteLiteral(" class=\"input-style no-borders has-icon validate-field mb-4\"");

WriteLiteral(">\r\n                            <i");

WriteLiteral(" class=\"fa fa-address-book\"");

WriteLiteral("></i>\r\n                            <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" name=\"PatientAddress\"");

WriteLiteral(" class=\"form-control validate-name\"");

WriteAttribute ("value", " value=\"", "\""

#line 147 "basicInfo.cshtml"
                                                                        , Tuple.Create<string,object,bool> ("", App.PatientEMR.PatientsStreet

#line default
#line hidden
, false)
);
WriteLiteral(" id=\"\"");

WriteLiteral(" placeholder=\"Address\"");

WriteLiteral(">\r\n                            <label");

WriteLiteral(" for=\"\"");

WriteLiteral(" class=\"color-highlight\"");

WriteLiteral(">Address</label>\r\n                            <i");

WriteLiteral(" class=\"fa fa-times disabled invalid color-red-dark\"");

WriteLiteral("></i>\r\n                            <i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\r\n                            <!-- <em>(required)</em> -->\r\n                " +
"        </div>\r\n                        <div");

WriteLiteral(" class=\"content\"");

WriteLiteral(">\r\n                            <div");

WriteLiteral(" class=\"row row-auto mb-0\"");

WriteLiteral(">\r\n                                <p>Attachments</p>\r\n");


#line 156 "basicInfo.cshtml"
                                

#line default
#line hidden

#line 156 "basicInfo.cshtml"
                                 foreach (var Attachment in Model)
                                {


#line default
#line hidden
WriteLiteral("                                    <div");

WriteLiteral(" class=\"px-1\"");

WriteLiteral(">\r\n                                        <div");

WriteLiteral(" class=\"btn btn-m mb-3 rounded-xl text-uppercase font-900 shadow-s bg-blue-dark\"");

WriteLiteral(" style=\"word-wrap: break-word;\"");

WriteLiteral(">\r\n");

WriteLiteral("                                            ");


#line 160 "basicInfo.cshtml"
                                       Write(Attachment.AttachmentsName);


#line default
#line hidden
WriteLiteral("\r\n                                        </div>\r\n                               " +
"     <i");

WriteLiteral(" class=\"fa fa-trash color-red-dark\"");

WriteAttribute ("onclick", " onclick=\"", "\""
, Tuple.Create<string,object,bool> ("", "window.location", true)
, Tuple.Create<string,object,bool> (" ", "=", true)
, Tuple.Create<string,object,bool> (" ", "\'hybrid:deletefiles?FileID=", true)

#line 162 "basicInfo.cshtml"
                                                                                         , Tuple.Create<string,object,bool> ("", Attachment.Id

#line default
#line hidden
, false)
, Tuple.Create<string,object,bool> ("", "\'", true)
);
WriteLiteral("></i>\r\n                                    </div>\r\n");


#line 164 "basicInfo.cshtml"
                                }


#line default
#line hidden
WriteLiteral("                                <div");

WriteLiteral(" class=\"d-flex text-center mb-3\"");

WriteLiteral(">\r\n                                    <div");

WriteLiteral(" class=\"me-3 speach-icon\"");

WriteLiteral(">\r\n                                        <a");

WriteAttribute ("href", " href=\"", "\""
, Tuple.Create<string,object,bool> ("", "hybrid:DoUploadFiles?ParentID=", true)

#line 167 "basicInfo.cshtml"
                                        , Tuple.Create<string,object,bool> ("", App.PatientEMR.Id

#line default
#line hidden
, false)
, Tuple.Create<string,object,bool> ("", "&AccountsID=", true)

#line 167 "basicInfo.cshtml"
                                                                      , Tuple.Create<string,object,bool> ("", SecureStorage.GetAsync("AccountID").Result

#line default
#line hidden
, false)
, Tuple.Create<string,object,bool> ("", "&Type=Patient", true)
);
WriteLiteral(" class=\"bg-green-dark ms-2\"");

WriteLiteral(" data-menu=\"menu-upload\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-plus\"");

WriteLiteral("></i></a>\r\n                                    </div>\r\n                          " +
"      </div>\r\n                            </div>\r\n                        </div>" +
"\r\n                        <button");

WriteLiteral(" id=\"submit-button\"");

WriteLiteral(" type=\"submit\"");

WriteLiteral(" data-back-button");

WriteLiteral(" class=\"btn btn-m btn-full mt-4 mb-4 rounded-l shadow-xl bg-highlight font-900 fo" +
"nt-14 text-uppercase w-100\"");

WriteLiteral(">");


#line 172 "basicInfo.cshtml"
                                                                                                                                                                                         Write(AppResources.SaveBasicInformation);


#line default
#line hidden
WriteLiteral("</button>\r\n                    </form>\r\n                </div>\r\n            </div" +
">\r\n        </div>\r\n\r\n\r\n\r\n\r\n    </div>\r\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"Sticky53/scripts/bootstrap.min.js\"");

WriteLiteral("></script>\r\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"Sticky53/scripts/custom.js\"");

WriteLiteral("></script>\r\n\r\n</body>\r\n");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class basicInfoBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
