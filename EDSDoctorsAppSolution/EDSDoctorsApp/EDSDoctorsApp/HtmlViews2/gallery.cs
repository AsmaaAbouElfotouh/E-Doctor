#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EDSDoctorsApp.HtmlViews2
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#line 1 "gallery.cshtml"
using EDSDoctorsApp;

#line default
#line hidden

#line 2 "gallery.cshtml"
using EDSDoctorsApp.Resources;

#line default
#line hidden

#line 3 "gallery.cshtml"
using EDSDoctorsApp.Helper.EMR;

#line default
#line hidden


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "17.1.0.269")]
public partial class gallery : galleryBase
{

#line hidden

#line 4 "gallery.cshtml"
public List<GallaryVm> Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("<!DOCTYPE HTML>\r\n<html");

WriteLiteral(" lang=\"en\"");

WriteLiteral(">\r\n\r\n<head>\r\n    <meta");

WriteLiteral(" http-equiv=\"Content-Type\"");

WriteLiteral(" content=\"text/html; charset=utf-8\"");

WriteLiteral(" />\r\n    <meta");

WriteLiteral(" name=\"apple-mobile-web-app-capable\"");

WriteLiteral(" content=\"yes\"");

WriteLiteral(">\r\n    <meta");

WriteLiteral(" name=\"apple-mobile-web-app-status-bar-style\"");

WriteLiteral(" content=\"black-translucent\"");

WriteLiteral(">\r\n    <meta");

WriteLiteral(" name=\"viewport\"");

WriteLiteral("\r\n          content=\"width=device-width, initial-scale=1, minimum-scale=1, maximu" +
"m-scale=1, viewport-fit=cover\"");

WriteLiteral(" />\r\n    <link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" type=\"text/css\"");

WriteAttribute ("href", " href=\"", "\""

#line 15 "gallery.cshtml"
          , Tuple.Create<string,object,bool> ("", string.Concat("Sticky53/styles/bootstrap",AppResources.dir2,".css")

#line default
#line hidden
, false)
);
WriteLiteral(">\r\n    <link");

WriteLiteral(" href=\"Sticky53/fonts/css.css?family=Roboto:300,300i,400,400i,500,500i,700,700i,9" +
"00,900i|Source+Sans+Pro:300,300i,400,400i,600,600i,700,700i,900,900i&display=swa" +
"p\"");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(">\r\n    <link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" type=\"text/css\"");

WriteLiteral(" href=\"Sticky53/fonts/css/fontawesome-all.min.css\"");

WriteLiteral(">\r\n\r\n    <link");

WriteLiteral(" rel=\"manifest\"");

WriteLiteral(" href=\"_manifest.json\"");

WriteLiteral(" data-pwa-version=\"set_in_manifest_and_pwa_js\"");

WriteLiteral(">\r\n    <link");

WriteLiteral(" rel=\"apple-touch-icon\"");

WriteLiteral(" sizes=\"180x180\"");

WriteLiteral(" href=\"Sticky53/app/icons/icon-192x192.png\"");

WriteLiteral(@">
    <style>
        div.gallery-view-1,
        div.gallery-view-2,
        div.gallery-view-3 {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            flex-direction: row;
        }

        .gallery-view-1 .cardImgCompare {
            margin-bottom: 5%;
            width: 30%;
            float: left;
        }

        .gallery-view-2 .cardImgCompare {
            width: 47.5%;
            margin-bottom: 5%;
            float: left;
        }
    </style>
</head>

<body");

WriteLiteral(" class=\"theme-light\"");

WriteLiteral(" data-highlight=\"highlight-red\"");

WriteLiteral(" data-gradient=\"body-default\"");

WriteLiteral(">\r\n    <div");

WriteLiteral(" id=\"preloader\"");

WriteLiteral(">\r\n        <div");

WriteLiteral(" class=\"spinner-border color-highlight\"");

WriteLiteral(" role=\"status\"");

WriteLiteral("></div>\r\n    </div>\r\n    <div");

WriteLiteral(" id=\"page\"");

WriteLiteral(">\r\n        <div");

WriteLiteral(" class=\"header header-fixed header-logo-center \"");

WriteLiteral(" id=\"headerScope\"");

WriteLiteral(">\r\n            <p");

WriteLiteral(" class=\"header-title\"");

WriteLiteral(">Gallery</p>\r\n            <a");

WriteLiteral(" href=\"hybrid:goback\"");

WriteLiteral(" data-back-button");

WriteLiteral(" class=\"header-icon header-icon-1\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fas fa-arrow-left\"");

WriteLiteral("></i></a>\r\n            <a");

WriteLiteral(" href=\"hybrid:GotoHome\"");

WriteLiteral(" class=\"header-icon header-icon-4\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fas fa-home\"");

WriteLiteral("></i></a>\r\n        </div>\r\n        <div");

WriteLiteral(" id=\"footer-bar\"");

WriteLiteral(" class=\"footer-bar-1\"");

WriteLiteral(">\r\n            <a");

WriteLiteral(" href=\"hybrid:gotobasicinfo\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-info-circle\"");

WriteLiteral("></i><span>Basic Info</span></a>\r\n            <a");

WriteLiteral(" href=\"hybrid:gotovitalsigns\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-heartbeat\"");

WriteLiteral("></i><span>Vital Signs</span></a>\r\n            <a");

WriteLiteral(" href=\"hybrid:gotogallery\"");

WriteLiteral(" class=\"active-nav\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-images\"");

WriteLiteral("></i><span>Gallery</span></a>\r\n        </div>\r\n        <div");

WriteLiteral(" class=\"page-content header-clear-medium\"");

WriteLiteral(">\r\n\r\n            <!-- comper Floating Button -->\r\n            <a");

WriteLiteral(" href=\"hybrid:gotocompare\"");

WriteLiteral("\r\n               class=\"float-end position-fixed btn btn-m btn-full shadow-bg sha" +
"dow-bg-m mb-3 rounded-s text-uppercase font-900 shadow-s bg-orange-dark btn-icon" +
" text-start\"");

WriteLiteral("\r\n               id=\"CompareId\"");

WriteLiteral("\r\n               style=\"right:30px;bottom: 10%;\"");

WriteLiteral(">\r\n                <!-- <i class=\"fa fa-check font-15 text-center\"></i> -->\r\n    " +
"            <i");

WriteLiteral(" class=\"fas fa-arrows-alt-h font-15 text-center\"");

WriteLiteral("></i> Compare selected\r\n                <!-- <span class=\"badge bg-white color-bl" +
"ack float-end ms-4 me-n2 mt-1\">4</span> -->\r\n            </a>\r\n\r\n            <di" +
"v");

WriteLiteral(" class=\"card card-style\"");

WriteLiteral(">\r\n                <!-- Filter Images View -->\r\n                <div");

WriteLiteral(" class=\"gallery-view-controls\"");

WriteLiteral(">\r\n                    <a");

WriteLiteral(" href=\"#\"");

WriteLiteral(" class=\"gallery-view-1 color-highlight\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-th\"");

WriteLiteral("></i></a>\r\n                    <a");

WriteLiteral(" href=\"#\"");

WriteLiteral(" class=\"gallery-view-2\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-th-large\"");

WriteLiteral("></i></a>\r\n                    <a");

WriteLiteral(" href=\"#\"");

WriteLiteral(" class=\"gallery-view-3\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-bars\"");

WriteLiteral("></i></a>\r\n                    <div");

WriteLiteral(" class=\"clear\"");

WriteLiteral("></div>\r\n                </div>\r\n                <!-- Conten -->\r\n               " +
" <div");

WriteLiteral(" class=\"mb-0 mt-n1 m-auto\"");

WriteLiteral(">\r\n                    <div");

WriteLiteral(" class=\"gallery-views gallery-view-1\"");

WriteLiteral(">\r\n");


#line 83 "gallery.cshtml"
                        

#line default
#line hidden

#line 83 "gallery.cshtml"
                         foreach (var image in @Model)
                        {


#line default
#line hidden
WriteLiteral("                            <div>\r\n                                <a");

WriteLiteral(" data-gallery=\"gallery-1\"");

WriteAttribute ("href", " href=\"", "\""
, Tuple.Create<string,object,bool> ("", "data:image/jpg;base64,", true)

#line 86 "gallery.cshtml"
                                                 , Tuple.Create<string,object,bool> ("", Shared.ConvertByteArrayToBase64(image.Src)

#line default
#line hidden
, false)
);
WriteLiteral(" onclick=\"return false;\"");

WriteLiteral(" >\r\n                                    <img");

WriteLiteral(" class=\"rounded-m preload-img shadow-l img-fluid entered loaded\"");

WriteLiteral(" alt=\"img\"");

WriteLiteral(" data-ll-status=\"loaded\"");

WriteAttribute ("src", " src=\"", "\""
, Tuple.Create<string,object,bool> ("", "data:image/jpg;base64,", true)

#line 87 "gallery.cshtml"
                                                                                                                               , Tuple.Create<string,object,bool> ("", Shared.ConvertByteArrayToBase64(image.Src)

#line default
#line hidden
, false)
);
WriteLiteral(">\r\n                                    <div");

WriteLiteral(" class=\"caption\"");

WriteLiteral(">\r\n                                        <h4");

WriteLiteral(" class=\"color-theme\"");

WriteLiteral(">");


#line 89 "gallery.cshtml"
                                                           Write(image.Caption);


#line default
#line hidden
WriteLiteral("</h4>\r\n                                        <div");

WriteLiteral(" class=\"divider bottom-0\"");

WriteLiteral("></div>\r\n                                    </div>\r\n                            " +
"    </a>\r\n                            </div>\r\n");

WriteLiteral("                            <div");

WriteLiteral(" class=\"form-check icon-check my-2\"");

WriteLiteral(">\r\n                                <input");

WriteLiteral(" class=\"form-check-input\"");

WriteLiteral(" type=\"checkbox\"");

WriteLiteral(" name=\"ImageCheckBox\"");

WriteAttribute ("value", " value=\"", "\""
, Tuple.Create<string,object,bool> ("", "data:image/jpg;base64,", true)

#line 95 "gallery.cshtml"
                                                                                           , Tuple.Create<string,object,bool> ("", Shared.ConvertByteArrayToBase64(image.Src)

#line default
#line hidden
, false)
);
WriteAttribute ("id", " id=\"", "\""

#line 95 "gallery.cshtml"
                                                                                                                                            , Tuple.Create<string,object,bool> ("", image.Caption

#line default
#line hidden
, false)
);
WriteLiteral(">\r\n                                <label");

WriteLiteral(" class=\"form-check-label\"");

WriteAttribute ("for", " for=\"", "\""

#line 96 "gallery.cshtml"
                              , Tuple.Create<string,object,bool> ("", image.Caption

#line default
#line hidden
, false)
);
WriteLiteral(">Compare </label>\r\n                                <i");

WriteLiteral(" class=\"icon-check-1 fa fa-circle color-gray-dark font-16 ms-2\"");

WriteLiteral("></i>\r\n                                <i");

WriteLiteral(" class=\"icon-check-2 fa fa-check-circle font-16 color-orange-dark ms-2\"");

WriteLiteral("></i>\r\n                            </div>\r\n");


#line 100 "gallery.cshtml"
                            

#line default
#line hidden

#line 109 "gallery.cshtml"
                                      


#line default
#line hidden
WriteLiteral("                            <!--  -->\r\n");


#line 111 "gallery.cshtml"
                        }


#line default
#line hidden
WriteLiteral("                    </div>\r\n                </div>\r\n            </div>\r\n        <" +
"/div>\r\n\r\n\r\n\r\n    </div>\r\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"Sticky53/scripts/bootstrap.min.js\"");

WriteLiteral("></script>\r\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"Sticky53/scripts/custom.js\"");

WriteLiteral("></script>\r\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"Sticky53/scripts/plugins.js\"");

WriteLiteral("></script>\r\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"Sticky/scripts/jquery-3.6.0.min.js\"");

WriteLiteral("></script>\r\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(">\r\n        $(\'#CompareId\').hide();\r\n    </script>\r\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(@">
        debugger;
        $(document).ready(function(){
          $(""input"").change(function()
          {
              var Checkedboxes = $(""input:checkbox:checked"");
              var unCheckedBoxes = $(""input:checkbox:not(:checked)"");
              if(Checkedboxes.length > 1)
              {
              unCheckedBoxes.each(function(){
                  document.getElementById(this.id).disabled= true;
              });
              localStorage.setItem(""FirstImage"",Checkedboxes[0].value);
              localStorage.setItem(""SecondImage"",Checkedboxes[1].value);
              $('#CompareId').show();
              }
              else
              {
              unCheckedBoxes.each(function(){document.getElementById(this.id).disabled= false;})
              $('#CompareId').hide();
              }
          });
        });
    </script>
</body>
</html>");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class galleryBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
