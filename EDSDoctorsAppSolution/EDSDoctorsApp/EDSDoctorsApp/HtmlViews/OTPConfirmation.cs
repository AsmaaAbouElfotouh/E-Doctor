#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EDSDoctorsApp.HtmlViews
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#line 2 "OTPConfirmation.cshtml"
using EDSDoctorsApp.Resources;

#line default
#line hidden


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "17.1.0.269")]
public partial class OTPConfirmation : OTPConfirmationBase
{

#line hidden

#line 1 "OTPConfirmation.cshtml"
public EDSDoctorsApp.Models.ConfirmEmailModel Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("\n<!DOCTYPE HTML>\n<html");

WriteLiteral(" lang=\"en\"");

WriteAttribute ("dir", " dir=\"", "\""

#line 5 "OTPConfirmation.cshtml"
, Tuple.Create<string,object,bool> ("", AppResources.dir

#line default
#line hidden
, false)
);
WriteLiteral(">\n<head>\n    <meta");

WriteLiteral(" http-equiv=\"Content-Type\"");

WriteLiteral(" content=\"text/html; charset=utf-8\"");

WriteLiteral(" />\n    <meta");

WriteLiteral(" name=\"apple-mobile-web-app-capable\"");

WriteLiteral(" content=\"yes\"");

WriteLiteral(">\n    <meta");

WriteLiteral(" name=\"apple-mobile-web-app-status-bar-style\"");

WriteLiteral(" content=\"black-translucent\"");

WriteLiteral(">\n    <meta");

WriteLiteral(" name=\"viewport\"");

WriteLiteral(" content=\"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, " +
"viewport-fit=cover\"");

WriteLiteral(" />\n    <title>eDoctor Patient - OTP Confirmation</title>\n    <link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" type=\"text/css\"");

WriteAttribute ("href", " href=\"", "\""

#line 12 "OTPConfirmation.cshtml"
          , Tuple.Create<string,object,bool> ("", string.Concat("Sticky/styles/bootstrap", AppResources.dir2, ".css")

#line default
#line hidden
, false)
);
WriteLiteral(">\n    <link");

WriteLiteral(" href=\"Sticky/fonts/css.css?family=Roboto:300,300i,400,400i,500,500i,700,700i,900" +
",900i|Source+Sans+Pro:300,300i,400,400i,600,600i,700,700i,900,900i&display=swap\"" +
"");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(">\n    <link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" type=\"text/css\"");

WriteLiteral(" href=\"Sticky/fonts/css/fontawesome-all.min.css\"");

WriteLiteral(">\n    <link");

WriteLiteral(" rel=\"manifest\"");

WriteLiteral(" href=\"_manifest.json\"");

WriteLiteral(" data-pwa-version=\"set_in_manifest_and_pwa_js\"");

WriteLiteral(">\n    <link");

WriteLiteral(" rel=\"apple-touch-icon\"");

WriteLiteral(" sizes=\"180x180\"");

WriteLiteral(" href=\"Sticky/app/icons/icon-192x192.png\"");

WriteLiteral(">\n    <link");

WriteLiteral(" href=\"Sticky/styles/highlights/highlight_dark.css\"");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" />\n</head>\n<body");

WriteLiteral(" class=\"theme-light\"");

WriteLiteral(" data-highlight=\"highlight-dark\"");

WriteLiteral(" data-gradient=\"body-default\"");

WriteLiteral(">\n    <div");

WriteLiteral(" id=\"page\"");

WriteLiteral(">\n        <div");

WriteLiteral(" class=\"header header-fixed header-logo-center\"");

WriteLiteral(">\n           <p");

WriteLiteral(" class=\"header-title\"");

WriteLiteral(">OTP</p>\n            <a");

WriteLiteral(" href=\"hybrid:goback\"");

WriteLiteral(" data-back-button");

WriteLiteral(" class=\"header-icon header-icon-1\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fas fa-arrow-left\"");

WriteLiteral("></i></a>\n        </div>\n\n        <div");

WriteLiteral(" class=\"page-content header-clear-medium\"");

WriteLiteral(">\n            <div");

WriteLiteral(" class=\"card card-style\"");

WriteLiteral(">\n                <div");

WriteLiteral(" class=\"content mb-0\"");

WriteLiteral(">\n                    <h1");

WriteLiteral(" class=\"text-center\"");

WriteLiteral("><i");

WriteLiteral(" class=\"fa fa-envelope fa-3x color-orange-light mt-3\"");

WriteLiteral("></i></h1>\n                    <p");

WriteLiteral(" class=\"text-center color-orange-light font-14\"");

WriteLiteral(">\n");


#line 31 "OTPConfirmation.cshtml"
                        

#line default
#line hidden

#line 31 "OTPConfirmation.cshtml"
                           System.Text.StringBuilder sb = new System.Text.StringBuilder();
                            sb.AppendFormat(AppResources.Enterthecode, Model.email); 

#line default
#line hidden
WriteLiteral("\n");

WriteLiteral("                        ");


#line 33 "OTPConfirmation.cshtml"
                   Write(sb.ToString());


#line default
#line hidden
WriteLiteral("\n                        <a");

WriteLiteral(" class=\"color-black\"");

WriteLiteral(" onclick=\"ResendOTP(this)\"");

WriteLiteral(">");


#line 34 "OTPConfirmation.cshtml"
                                                                    Write(AppResources.Here);


#line default
#line hidden
WriteLiteral("</a>\n");

WriteLiteral("                        ");


#line 35 "OTPConfirmation.cshtml"
                   Write(AppResources.ifyouhavenotreceived);


#line default
#line hidden
WriteLiteral("\n                    </p>\n                    <form");

WriteLiteral(" action=\"hybrid:DoConfirmation?\"");

WriteLiteral(" id=\"OTPForm\"");

WriteLiteral(" onsubmit=\"\"");

WriteLiteral(">\n                        \n                        <input");

WriteLiteral(" type=\"hidden\"");

WriteLiteral(" name=\"PatientsEmail\"");

WriteAttribute ("value", " value=\"", "\""

#line 39 "OTPConfirmation.cshtml"
                                  , Tuple.Create<string,object,bool> ("", Model.email

#line default
#line hidden
, false)
);
WriteLiteral(" class=\"form-control validate-text\"");

WriteLiteral(">\n\n                        <div");

WriteLiteral(" class=\"input-style has-icon validate-field\"");

WriteLiteral(">\n                            <i");

WriteLiteral(" class=\"fa fa-unlock-alt\"");

WriteLiteral("></i>\n                            <input");

WriteLiteral(" type=\"number\"");

WriteLiteral(" name=\"OTP\"");

WriteLiteral(" class=\"form-control validate-text font-14\"");

WriteLiteral(" id=\"OTP\"");

WriteLiteral(" placeholder=\"OTP\"");

WriteLiteral(" required>\n                            <label");

WriteLiteral(" for=\"OTP\"");

WriteLiteral(" class=\"color-highlight font-14\"");

WriteLiteral(">");


#line 44 "OTPConfirmation.cshtml"
                                                                        Write(AppResources.EnterOTP);


#line default
#line hidden
WriteLiteral("</label>\n                            <i");

WriteLiteral(" class=\"fa fa-times disabled invalid color-red-dark\"");

WriteLiteral("></i>\n                            <i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\n                            <em>(required)</em>\n                        </d" +
"iv>\n                        ");

WriteLiteral("\n\n                        ");

WriteLiteral("\n                        <button");

WriteLiteral(" id=\"submit-button\"");

WriteLiteral(" type=\"submit\"");

WriteLiteral(" data-back-button");

WriteLiteral(" class=\"btn btn-m btn-full mt-4 mb-4 rounded-l shadow-xl bg-highlight font-900 fo" +
"nt-14 text-uppercase\"");

WriteLiteral(">");


#line 52 "OTPConfirmation.cshtml"
                                                                                                                                                                                   Write(AppResources.Confirm);


#line default
#line hidden
WriteLiteral("</button>\n                    </form>\n                </div>\n            </div>\n " +
"       </div>\n\n        <div");

WriteLiteral(" id=\"toast-main\"");

WriteLiteral(" class=\"toast toast-tiny toast-container toast-bottom bg-orange-light\"");

WriteLiteral(" data-bs-delay=\"2000\"");

WriteLiteral(" data-autohide=\"true\"");

WriteLiteral(">\n            ");

WriteLiteral("\n            <i");

WriteLiteral(" class=\"toast-message\"");

WriteLiteral("></i>\n        </div>\n    </div>\n\n    <script");

WriteLiteral(" src=\"Sticky/scripts/jquery-3.6.0.min.js\"");

WriteLiteral("></script>\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"Sticky/scripts/bootstrap.min.js\"");

WriteLiteral("></script>\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"Sticky/scripts/custom.js\"");

WriteLiteral("></script>\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"Sticky/scripts/EDS.js\"");

WriteLiteral("></script>\n    <script>function ResendOTP(sender) {\n            $(sender).attr(\"h" +
"ref\", \"hybrid:DoResendPassword?\" + $(\"form\").serialize());\n        }</script>\n</" +
"body>\n</html>\n");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class OTPConfirmationBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
