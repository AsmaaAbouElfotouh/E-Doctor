#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EDSDoctorsApp.HtmlViews
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#line 2 "RegWizard_2.cshtml"
using EDSDoctorsApp.Resources;

#line default
#line hidden


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "17.1.0.269")]
public partial class RegWizard_2 : RegWizard_2Base
{

#line hidden

public override void Execute()
{
WriteLiteral("\r\n");

WriteLiteral("<!DOCTYPE html>\r\n<html");

WriteLiteral(" lang=\"en\"");

WriteAttribute ("dir", " dir=\"", "\""

#line 4 "RegWizard_2.cshtml"
, Tuple.Create<string,object,bool> ("", AppResources.dir

#line default
#line hidden
, false)
);
WriteLiteral(">\r\n<head>\r\n    <meta");

WriteLiteral(" http-equiv=\"Content-Type\"");

WriteLiteral(" content=\"text/html; charset=utf-8\"");

WriteLiteral(" />\r\n    <meta");

WriteLiteral(" name=\"apple-mobile-web-app-capable\"");

WriteLiteral(" content=\"yes\"");

WriteLiteral(" />\r\n    <meta");

WriteLiteral(" name=\"apple-mobile-web-app-status-bar-style\"");

WriteLiteral("\r\n          content=\"black-translucent\"");

WriteLiteral(" />\r\n    <meta");

WriteLiteral(" name=\"viewport\"");

WriteLiteral("\r\n          content=\"width=device-width, initial-scale=1, minimum-scale=1, maximu" +
"m-scale=1, viewport-fit=cover\"");

WriteLiteral(" />\r\n    <title>eDoctor Patient - My Profile</title>\r\n    <link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" type=\"text/css\"");

WriteAttribute ("href", " href=\"", "\""

#line 13 "RegWizard_2.cshtml"
          , Tuple.Create<string,object,bool> ("", string.Concat("Sticky/styles/bootstrap",AppResources.dir2,".css")

#line default
#line hidden
, false)
);
WriteLiteral(">\r\n    <link");

WriteLiteral(" href=\"Sticky/fonts/css.css?family=Roboto:300,300i,400,400i,500,500i,700,700i,900" +
",900i|Source+Sans+Pro:300,300i,400,400i,600,600i,700,700i,900,900i&display=swap\"" +
"");

WriteLiteral("\r\n          rel=\"stylesheet\"");

WriteLiteral(" />\r\n    <link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral("\r\n          type=\"text/css\"");

WriteLiteral("\r\n          href=\"Sticky/fonts/css/fontawesome-all.min.css\"");

WriteLiteral(" />\r\n    <link");

WriteLiteral(" href=\"Sticky/plugins/BootstrapDatePicker/bootstrap-datepicker.min.css\"");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" />\r\n\r\n    <link");

WriteLiteral(" rel=\"manifest\"");

WriteLiteral("\r\n          href=\"_manifest.json\"");

WriteLiteral("\r\n          data-pwa-version=\"set_in_manifest_and_pwa_js\"");

WriteLiteral(" />\r\n    <link");

WriteLiteral(" rel=\"apple-touch-icon\"");

WriteLiteral("\r\n          sizes=\"180x180\"");

WriteLiteral("\r\n          href=\"Sticky/app/icons/icon-192x192.png\"");

WriteLiteral(" />\r\n    <link");

WriteLiteral(" href=\"Sticky/styles/highlights/highlight_dark.css\"");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" />\r\n</head>\r\n<body");

WriteLiteral(" class=\"theme-light\"");

WriteLiteral("\r\n      data-highlight=\"highlight-dark\"");

WriteLiteral("\r\n      data-gradient=\"body-default\"");

WriteLiteral(">\r\n    <div");

WriteLiteral(" id=\"page\"");

WriteLiteral(">\r\n        <div");

WriteLiteral(" class=\"header header-fixed header-logo-center header-auto-showx\"");

WriteLiteral(">\r\n            <i");

WriteLiteral(" class=\"header-title\"");

WriteLiteral("><img");

WriteLiteral(" class=\"img-fluidx ps-3 pe-3\"");

WriteLiteral(" style=\"height:30px\"");

WriteLiteral(" src=\"Sticky/images/eDoctorGroupLight.png\"");

WriteLiteral("></i>\r\n            ");

WriteLiteral("\r\n        </div>\r\n        <div");

WriteLiteral(" class=\"page-content header-clear-medium\"");

WriteLiteral(">\r\n            <div");

WriteLiteral(" class=\"card card-style\"");

WriteLiteral(">\r\n                <div");

WriteLiteral(" class=\"content mb-0\"");

WriteLiteral(">\r\n                    <h2");

WriteLiteral(" class=\"mb-4 color-orange-light\"");

WriteLiteral(">");


#line 40 "RegWizard_2.cshtml"
                                                   Write(AppResources.AddressDetails);


#line default
#line hidden
WriteLiteral("</h2>\r\n                    <input");

WriteLiteral(" class=\"hfPGUID\"");

WriteLiteral(" type=\"hidden\"");

WriteLiteral(" value=\"\"");

WriteLiteral(" />\r\n\r\n                    <div");

WriteLiteral(" class=\"input-style input-style-active has-borders validate-field mb-4\"");

WriteLiteral(">\r\n                        <label");

WriteLiteral(" for=\"form5\"");

WriteLiteral(" class=\"color-highlight font-14 mt-1\"");

WriteLiteral(">Country</label>\r\n                        <select");

WriteLiteral(" id=\"form5\"");

WriteLiteral(" name=\"Country\"");

WriteLiteral(" class=\"form-control ddlcountry\"");

WriteLiteral(" required>\r\n                            <option");

WriteLiteral(" value=\"default\"");

WriteLiteral(" disabled selected>\r\n");

WriteLiteral("                                ");


#line 47 "RegWizard_2.cshtml"
                           Write(AppResources.SelectValue);


#line default
#line hidden
WriteLiteral("\r\n                            </option>\r\n                            <option");

WriteLiteral(" value=\"Option 1\"");

WriteLiteral(">Option 1</option>\r\n                            <option");

WriteLiteral(" value=\"Option 2\"");

WriteLiteral(">Option 2</option>\r\n                        </select>\r\n\r\n                        " +
"<i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\r\n                        <i");

WriteLiteral(" class=\"fa fa-check disabled invalid color-red-dark\"");

WriteLiteral("></i>\r\n                        <em>");


#line 55 "RegWizard_2.cshtml"
                       Write(AppResources.required);


#line default
#line hidden
WriteLiteral("</em>\r\n                    </div>\r\n                    <div");

WriteLiteral(" class=\"input-style input-style-active has-borders validate-field mb-4\"");

WriteLiteral(">\r\n                        <label");

WriteLiteral(" for=\"form5\"");

WriteLiteral(" class=\"color-highlight font-14 mt-1\"");

WriteLiteral(">City</label>\r\n                        <select");

WriteLiteral(" id=\"form5\"");

WriteLiteral(" name=\"City\"");

WriteLiteral(" class=\"form-control ddlcity\"");

WriteLiteral(" required>\r\n                            <option");

WriteLiteral(" value=\"default\"");

WriteLiteral(" disabled selected>\r\n");

WriteLiteral("                                ");


#line 61 "RegWizard_2.cshtml"
                           Write(AppResources.SelectValue);


#line default
#line hidden
WriteLiteral("\r\n                            </option>\r\n                            <option");

WriteLiteral(" value=\"Option 1\"");

WriteLiteral(">Option 1</option>\r\n                            <option");

WriteLiteral(" value=\"Option 2\"");

WriteLiteral(">Option 2</option>\r\n                        </select>\r\n\r\n                        " +
"<i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\r\n                        <i");

WriteLiteral(" class=\"fa fa-check disabled invalid color-red-dark\"");

WriteLiteral("></i>\r\n                        <em>");


#line 69 "RegWizard_2.cshtml"
                       Write(AppResources.required);


#line default
#line hidden
WriteLiteral("</em>\r\n                    </div>\r\n                    <div");

WriteLiteral(" class=\"input-style input-style-active has-borders validate-field mb-4\"");

WriteLiteral(">\r\n                        <label");

WriteLiteral(" for=\"form5\"");

WriteLiteral(" class=\"color-highlight font-14 mt-1\"");

WriteLiteral(">District</label>\r\n                        <select");

WriteLiteral(" id=\"form5\"");

WriteLiteral(" name=\"District\"");

WriteLiteral(" class=\"form-control ddldistrict\"");

WriteLiteral(">\r\n                            <option");

WriteLiteral(" value=\"default\"");

WriteLiteral(" disabled selected>\r\n");

WriteLiteral("                                ");


#line 75 "RegWizard_2.cshtml"
                           Write(AppResources.SelectValue);


#line default
#line hidden
WriteLiteral("\r\n                            </option>\r\n                            <option");

WriteLiteral(" value=\"Option 1\"");

WriteLiteral(">Option 1</option>\r\n                            <option");

WriteLiteral(" value=\"Option 2\"");

WriteLiteral(">Option 2</option>\r\n                        </select>\r\n\r\n                        " +
"<i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\r\n                        <i");

WriteLiteral(" class=\"fa fa-check disabled invalid color-red-dark\"");

WriteLiteral("></i>\r\n                        <em></em>\r\n                    </div>\r\n           " +
"         <div");

WriteLiteral(" class=\"input-style input-style-active has-borders validate-field mb-4\"");

WriteLiteral(">\r\n                        <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" name=\"AddressBuilding\"");

WriteLiteral(" class=\"form-control validate-name font-14\"");

WriteLiteral(" id=\"AddressBuilding\"");

WriteLiteral(" placeholder=\"Building No.\"");

WriteLiteral(" value=\"\"");

WriteLiteral(">\r\n                        <label");

WriteLiteral(" for=\"PatientsName\"");

WriteLiteral(" class=\"color-highlight font-14 mt-1\"");

WriteLiteral(">Building No.</label>\r\n                        <i");

WriteLiteral(" class=\"fa fa-times disabled invalid color-red-dark\"");

WriteLiteral("></i>\r\n                        <i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\r\n                        <em></em>\r\n                    </div>\r\n           " +
"         <div");

WriteLiteral(" class=\"input-style input-style-active has-borders validate-field mb-4\"");

WriteLiteral(">\r\n                        <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" name=\"AddressStreet\"");

WriteLiteral(" class=\"form-control validate-name font-14\"");

WriteLiteral(" id=\"AddressStreet\"");

WriteLiteral(" placeholder=\"Street\"");

WriteLiteral(" value=\"\"");

WriteLiteral(">\r\n                        <label");

WriteLiteral(" for=\"PatientsName\"");

WriteLiteral(" class=\"color-highlight font-14 mt-1\"");

WriteLiteral(">Street</label>\r\n                        <i");

WriteLiteral(" class=\"fa fa-times disabled invalid color-red-dark\"");

WriteLiteral("></i>\r\n                        <i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\r\n                        <em></em>\r\n                    </div>\r\n           " +
"         <div");

WriteLiteral(" class=\"input-style input-style-active has-borders validate-field mb-4\"");

WriteLiteral(">\r\n                        <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" name=\"AddressPostal\"");

WriteLiteral(" class=\"form-control validate-name font-14\"");

WriteLiteral(" id=\"AddressPostal\"");

WriteLiteral(" placeholder=\"Postal Code\"");

WriteLiteral(" value=\"\"");

WriteLiteral(">\r\n                        <label");

WriteLiteral(" for=\"PatientsName\"");

WriteLiteral(" class=\"color-highlight font-14 mt-1\"");

WriteLiteral(">Postal Code</label>\r\n                        <i");

WriteLiteral(" class=\"fa fa-times disabled invalid color-red-dark\"");

WriteLiteral("></i>\r\n                        <i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\r\n                        <em></em>\r\n                    </div>\r\n           " +
"         <div");

WriteLiteral(" class=\"input-style input-style-active has-borders validate-field mb-4\"");

WriteLiteral(">\r\n                        <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" name=\"AddressLandmark\"");

WriteLiteral(" class=\"form-control validate-name font-14\"");

WriteLiteral(" id=\"AddressLandmark\"");

WriteLiteral(" placeholder=\"Landmark\"");

WriteLiteral(" value=\"\"");

WriteLiteral(">\r\n                        <label");

WriteLiteral(" for=\"PatientsName\"");

WriteLiteral(" class=\"color-highlight font-14 mt-1\"");

WriteLiteral(">Landmark</label>\r\n                        <i");

WriteLiteral(" class=\"fa fa-times disabled invalid color-red-dark\"");

WriteLiteral("></i>\r\n                        <i");

WriteLiteral(" class=\"fa fa-check disabled valid color-green-dark\"");

WriteLiteral("></i>\r\n                        <em></em>\r\n                    </div>\r\n           " +
"     </div>\r\n            </div>\r\n            <div");

WriteLiteral(" class=\"card card-style\"");

WriteLiteral(">\r\n                    <div");

WriteLiteral(" class=\"content mb-2\"");

WriteLiteral(">\r\n                        <h2");

WriteLiteral(" class=\"mb-4 color-orange-light\"");

WriteLiteral(">");


#line 117 "RegWizard_2.cshtml"
                                                       Write(AppResources.Schedules);


#line default
#line hidden
WriteLiteral("</h2>\r\n                        <table");

WriteLiteral(" class=\"table table-borderless text-center rounded-sm shadow-l\"");

WriteLiteral(" style=\"overflow: hidden;table-layout:auto;\"");

WriteLiteral(">\r\n                            <thead>\r\n                                <tr");

WriteLiteral(" class=\"bg-night-light\"");

WriteLiteral(">\r\n                                    <th");

WriteLiteral(" scope=\"col\"");

WriteLiteral(" class=\"color-white\"");

WriteLiteral(">Day</th>\r\n                                    <th");

WriteLiteral(" scope=\"col\"");

WriteLiteral(" class=\"color-white\"");

WriteLiteral(">From</th>\r\n                                    <th");

WriteLiteral(" scope=\"col\"");

WriteLiteral(" class=\"color-white\"");

WriteLiteral(">To</th>\r\n                                    <th");

WriteLiteral(" scope=\"col\"");

WriteLiteral(" class=\"color-white\"");

WriteLiteral(">Max Visits</th>\r\n                                </tr>\r\n                        " +
"    </thead>\r\n                            <tbody>\r\n                             " +
"   <tr>\r\n                                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Saturday</th>\r\n                                    <td><input");

WriteLiteral(" type=\"time\"");

WriteLiteral(" /></td>\r\n                                    <td><input");

WriteLiteral(" type=\"time\"");

WriteLiteral(" /></td>\r\n                                    <td><input");

WriteLiteral(" type=\"number\"");

WriteLiteral(" /></td>\r\n                                </tr>\r\n                                " +
"<tr>\r\n                                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Sunday</th>\r\n                                    <td><input");

WriteLiteral(" type=\"time\"");

WriteLiteral(" /></td>\r\n                                    <td><input");

WriteLiteral(" type=\"time\"");

WriteLiteral(" /></td>\r\n                                    <td><input");

WriteLiteral(" type=\"number\"");

WriteLiteral(" /></td>\r\n                                </tr>\r\n                                " +
"<tr>\r\n                                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Monday</th>\r\n                                    <td><input");

WriteLiteral(" type=\"time\"");

WriteLiteral(" /></td>\r\n                                    <td><input");

WriteLiteral(" type=\"time\"");

WriteLiteral(" /></td>\r\n                                    <td><input");

WriteLiteral(" type=\"number\"");

WriteLiteral(" /></td>\r\n                                </tr>\r\n                                " +
"<tr>\r\n                                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Tuesday</th>\r\n                                    <td><input");

WriteLiteral(" type=\"time\"");

WriteLiteral(" /></td>\r\n                                    <td><input");

WriteLiteral(" type=\"time\"");

WriteLiteral(" /></td>\r\n                                    <td><input");

WriteLiteral(" type=\"number\"");

WriteLiteral(" /></td>\r\n                                </tr>\r\n                                " +
"<tr>\r\n                                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Wednesday</th>\r\n                                    <td><input");

WriteLiteral(" type=\"time\"");

WriteLiteral(" /></td>\r\n                                    <td><input");

WriteLiteral(" type=\"time\"");

WriteLiteral(" /></td>\r\n                                    <td><input");

WriteLiteral(" type=\"number\"");

WriteLiteral(" /></td>\r\n                                </tr>\r\n                                " +
"<tr>\r\n                                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Thursday</th>\r\n                                    <td><input");

WriteLiteral(" type=\"time\"");

WriteLiteral(" /></td>\r\n                                    <td><input");

WriteLiteral(" type=\"time\"");

WriteLiteral(" /></td>\r\n                                    <td><input");

WriteLiteral(" type=\"number\"");

WriteLiteral(" /></td>\r\n                                </tr>\r\n                               <" +
"tr>\r\n                                    <th");

WriteLiteral(" scope=\"row\"");

WriteLiteral(">Friday</th>\r\n                                    <td><input");

WriteLiteral(" type=\"time\"");

WriteLiteral(" /></td>\r\n                                    <td><input");

WriteLiteral(" type=\"time\"");

WriteLiteral(" /></td>\r\n                                    <td><input");

WriteLiteral(" type=\"number\"");

WriteLiteral(" /></td>\r\n                                </tr>\r\n                            </tb" +
"ody>\r\n                        </table>\r\n                    </div>\r\n            " +
"    </div>\r\n        </div>\r\n        <div");

WriteLiteral(" id=\"toast-main\"");

WriteLiteral(" class=\"toast toast-tiny toast-container toast-bottom bg-orange-light\"");

WriteLiteral(" data-bs-delay=\"2000\"");

WriteLiteral(" data-autohide=\"true\"");

WriteLiteral(">\r\n            ");

WriteLiteral("\r\n            <i");

WriteLiteral(" class=\"toast-message\"");

WriteLiteral("></i>\r\n\r\n        </div>\r\n    </div>\r\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"Sticky/scripts/jquery-3.6.0.min.js\"");

WriteLiteral("></script>\r\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"Sticky/scripts/bootstrap.min.js\"");

WriteLiteral("></script>\r\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"Sticky/scripts/custom.js\"");

WriteLiteral("></script>\r\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"Sticky/scripts/EDS.js\"");

WriteLiteral("></script>\r\n\r\n    <script");

WriteLiteral(" src=\"Sticky/plugins/BootstrapDatePicker/bootstrap-datepicker.min.js\"");

WriteLiteral("></script>\r\n    <script>\r\n        function convertImagetoBytes()\r\n        {\r\n\r\n  " +
"      }\r\n    </script>\r\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(">\r\n        $(document).ready(function () {\r\n            $(\'#PatientsDOB\').datepic" +
"ker({\r\n                format: \"dd/mm/yyyy\",\r\n                autoclose: true,\r\n" +
"                clearBtn: true,\r\n            });\r\n            $(\".ddlgender > [v" +
"alue=\" + $(\'.hfGender\').val() + \"]\").attr(\"selected\", \"true\");\r\n        });\r\n   " +
"     function ChangeProfile(sender)\r\n        {\r\n             debugger;\r\n        " +
"        console.log($(\'.hfPGUID\').val());\r\n            var reader = new FileRead" +
"er();\r\n        reader.onload = function () { $(\"#userImg\").attr(\"src\", reader.re" +
"sult); $(\"#hiddenImg\").attr(\"value\", reader.result); }\r\n        reader.readAsDat" +
"aURL(sender.files[0]);\r\n                var files = sender.files[0];\r\n          " +
"      $.ajax({\r\n                    type: \"post\",\r\n                    async: tr" +
"ue,\r\n                    dataType: \"json\",\r\n                    url: GlobalUrl +" +
" \"ChangeProfilePicture\",\r\n                    contentType: \"application/json\",\r\n" +
"                    data: JSON.stringify({ \"file\": files, \"PGUID\": $(\'.hfPGUID\')" +
".val() }),\r\n                    success: function (response, $Id) {\r\n           " +
"             debugger;\r\n                    },\r\n                    error: funct" +
"ion (error) {\r\n                        var g = error;\r\n                    },\r\n " +
"               });\r\n        }\r\n        function ChangeLang(sender) {\r\n          " +
"  debugger;\r\n            var Lang = $(sender).val();\r\n            window.locatio" +
"n = \"hybrid:DoChangeLanguage?PGUID=\" + $(\'.hfPGUID\').val() + \"&Lang=\" + Lang;\r\n " +
"       }\r\n\r\n        function Uploadimg() {\r\n            $(\'.upload-file\').trigge" +
"r(\'click\');\r\n        }</script>\r\n</body>\r\n</html>");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class RegWizard_2Base
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
